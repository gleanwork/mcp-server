openapi: 3.0.0
info:
  version: 0.9.0
  title: Glean Client API
  contact:
    email: support@glean.com
  description: '# Introduction

    These are the public APIs to enable implementing a custom client interface to
    the Glean system.


    # Usage guidelines

    This API is evolving fast. Glean will provide advance notice of any planned backwards
    incompatible changes along

    with a 6-month sunset period for anything that requires developers to adopt the
    new versions.


    # SDK

    Client bindings for the API can be generated for most popular languages (Python,
    Java, NodeJS, etc). To do so:


    Download the OpenAPI specification for the API, by clicking on one of the following
    options:

    1. [Download JSON specification](https://api.redocly.com/registry/bundle/glean/Glean%20Client%20API%20SDK%20source/v1/openapi.json?branch=main&download=true)

    2. [Download YAML specification](https://api.redocly.com/registry/bundle/glean/Glean%20Client%20API%20SDK%20source/v1/openapi.yaml?branch=main&download=true)


    Use [openapi-generator-cli](https://github.com/OpenAPITools/openapi-generator-cli)
    to generate bindings for your language of choice, for example:

    ```bash shell

    $ npx @openapitools/openapi-generator-cli@latest generate -i client_api.yaml -g
    go

    ```


    To see available languages:

    ```bash shell

    $ npx @openapitools/openapi-generator-cli@latest list

    ```


    Determine the host you need to connect to. This will be the URL of the backend
    for your Glean deployment, for example, customer-be.glean.com

    '
  x-logo:
    url: https://app.glean.com/images/glean-text2.svg
servers:
- url: https://{domain}-be.glean.com/rest/api/v1
  variables:
    domain:
      default: domain
      description: Email domain (without extension) that determines the deployment
        backend.
security:
- BearerAuth: []
paths:
  /chat:
    post:
      tags:
      - Chat
      summary: Chat
      description: Have a conversation with Glean AI.
      operationId: chat
      x-visibility: Public
      x-codegen-request-body-name: payload
      parameters:
      - $ref: '#/components/parameters/xScioActAsHeader'
      - $ref: '#/components/parameters/xGleanAuthTypeHeader'
      - $ref: '#/components/parameters/timezoneOffset'
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/ChatRequest'
            examples:
              defaultExample:
                value:
                  messages:
                  - author: USER
                    messageType: CONTENT
                    fragments:
                    - text: What are the company holidays this year?
              gptAgentExample:
                value:
                  agentConfig:
                    agent: GPT
                  messages:
                  - author: USER
                    messageType: CONTENT
                    fragments:
                    - text: Who was the first person to land on the moon?
        description: Includes chat history for Glean AI to respond to.
        required: true
        x-exportParamName: Request
      responses:
        '200':
          description: OK
          content:
            text/plain:
              schema:
                $ref: '#/components/schemas/ChatResponse'
              examples:
                defaultExample:
                  value:
                    messages:
                    - author: GLEAN_AI
                      messageType: CONTENT
                      hasMoreFragments: false
                      agentConfig:
                        agent: DEFAULT
                        mode: DEFAULT
                      fragments:
                      - text: There are no holidays!
                streamingExample:
                  value:
                    messages:
                    - author: GLEAN_AI
                      messageType: CONTENT
                      agentConfig:
                        agent: DEFAULT
                        mode: DEFAULT
                        hasMoreFragments: true
                      fragments: null
                    - author: GLEAN_AI
                      messageType: CONTENT
                      agentConfig:
                        agent: DEFAULT
                        mode: DEFAULT
                        hasMoreFragments: true
                      fragments: null
                    - author: GLEAN_AI
                      messageType: CONTENT
                      agentConfig:
                        agent: DEFAULT
                        mode: DEFAULT
                        hasMoreFragments: true
                      fragments:
                      - text: e are
                    - author: GLEAN_AI
                      messageType: CONTENT
                      agentConfig:
                        agent: DEFAULT
                        mode: DEFAULT
                        hasMoreFragments: true
                      fragments:
                      - text: no hol
                    - author: GLEAN_AI
                      messageType: CONTENT
                      agentConfig:
                        agent: DEFAULT
                        mode: DEFAULT
                        hasMoreFragments: false
                      fragments:
                      - text: idays!
                updateResponse:
                  value:
                    messages:
                    - author: GLEAN_AI
                      messageType: UPDATE
                      agentConfig:
                        agent: DEFAULT
                        mode: DEFAULT
                      fragments:
                      - text: '**Reading:**'
                      - structuredResults:
                        - document:
                            id: '123'
                            title: Company Handbook
                citationResponse:
                  value:
                    messages:
                    - author: GLEAN_AI
                      messageType: CONTENT
                      agentConfig:
                        agent: DEFAULT
                        mode: DEFAULT
                      citations:
                      - sourceDocument:
                          id: '123'
                          title: Company Handbook
                          referenceRanges:
                          - textRange:
                              startIndex: 0
                              endIndex: 12
                              type: CITATION
        '400':
          description: Invalid request
        '401':
          description: Not Authorized
        '408':
          description: Request Timeout
        '429':
          description: Too Many Requests
  /search:
    post:
      tags:
      - Search
      summary: Search
      description: Retrieve results from the index for the given query and filters.
      operationId: search
      x-visibility: Public
      x-codegen-request-body-name: payload
      parameters:
      - $ref: '#/components/parameters/xScioActAsHeader'
      - $ref: '#/components/parameters/xGleanAuthTypeHeader'
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/SearchRequest'
        description: Search request
        x-exportParamName: Request
      responses:
        '200':
          description: OK
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/SearchResponse'
        '400':
          description: Invalid request
        '401':
          description: Not Authorized
        '403':
          description: Forbidden
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorInfo'
        '408':
          description: Request Timeout
        '422':
          description: Invalid Query
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorInfo'
        '429':
          description: Too Many Requests
  /runworkflow:
    post:
      tags:
      - Workflow
      summary: Runs a workflow
      description: Trigger a workflow with a given ID.
      operationId: runworkflow
      x-visibility: Public
      x-codegen-request-body-name: payload
      parameters:
      - $ref: '#/components/parameters/xScioActAsHeader'
      - $ref: '#/components/parameters/xGleanAuthTypeHeader'
      - $ref: '#/components/parameters/timezoneOffset'
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/RunWorkflowRequest'
        required: true
        x-exportParamName: Request
      responses:
        '200':
          description: OK
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ChatResponse'
        '400':
          description: Invalid request
        '401':
          description: Not Authorized
        '408':
          description: Request Timeout
        '429':
          description: Too Many Requests
  /listworkflows:
    post:
      tags:
      - Workflow
      summary: Lists available workflows
      description: Get a list of all available workflows for the user.
      operationId: listworkflows
      x-visibility: Public
      x-codegen-request-body-name: payload
      parameters:
      - $ref: '#/components/parameters/xScioActAsHeader'
      - $ref: '#/components/parameters/xGleanAuthTypeHeader'
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/ListWorkflowsRequest'
        required: true
        x-exportParamName: Request
      responses:
        '200':
          description: OK
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/WorkflowListResponse'
        '400':
          description: Invalid request
        '401':
          description: Not Authorized
        '429':
          description: Too Many Requests
  /workflow/{workflowId}:
    post:
      tags:
      - Workflow
      summary: Get workflow details
      description: Get details of a specific workflow by ID.
      operationId: getworkflow
      x-visibility: Public
      parameters:
      - $ref: '#/components/parameters/xScioActAsHeader'
      - $ref: '#/components/parameters/xGleanAuthTypeHeader'
      - name: workflowId
        in: path
        description: ID of the workflow to retrieve
        required: true
        schema:
          type: string
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/GetWorkflowRequest'
        required: false
        x-exportParamName: Request
      responses:
        '200':
          description: OK
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/WorkflowResponse'
        '400':
          description: Invalid request
        '401':
          description: Not Authorized
        '404':
          description: Workflow not found
        '429':
          description: Too Many Requests
  /summarize:
    post:
      tags:
      - Summarize
      summary: Summarize documents
      description: Generate an AI summary of the requested documents.
      operationId: summarize
      x-visibility: Public
      x-codegen-request-body-name: payload
      parameters:
      - $ref: '#/components/parameters/xScioActAsHeader'
      - $ref: '#/components/parameters/xGleanAuthTypeHeader'
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/SummarizeRequest'
        description: Includes request params such as the query and specs of the documents
          to summarize.
        required: true
        x-exportParamName: Request
      responses:
        '200':
          description: OK
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/SummarizeResponse'
        '400':
          description: Invalid request
        '401':
          description: Not Authorized
        '429':
          description: Too Many Requests
components:
  schemas:
    SessionInfo:
      properties:
        sessionTrackingToken:
          type: string
          description: A unique token for this session. A new session (and token)
            is created when the user issues a request from a new tab or when our server
            hasn't seen activity for more than 10 minutes from a tab.
        tabId:
          type: string
          description: A unique id for all requests a user makes from a given tab,
            no matter how far apart. A new tab id is only generated when a user issues
            a request from a new tab.
        lastSeen:
          type: string
          format: date-time
          description: The last time the server saw this token.
        lastQuery:
          type: string
          description: The last query seen by the server.
    ConnectorType:
      type: string
      description: The source from which document content was pulled, e.g. an API
        crawl or browser history
      enum:
      - API_CRAWL
      - BROWSER_CRAWL
      - BROWSER_HISTORY
      - BUILTIN
      - FEDERATED_SEARCH
      - PUSH_API
      - WEB_CRAWL
      - NATIVE_HISTORY
    DocumentContent:
      properties:
        fullTextList:
          type: array
          items:
            type: string
          description: The plaintext content of the document.
    Document:
      properties:
        id:
          type: string
          description: The Glean Document ID.
        datasource:
          type: string
          description: The app or other repository type from which the document was
            extracted
        connectorType:
          $ref: '#/components/schemas/ConnectorType'
        docType:
          type: string
          description: The datasource-specific type of the document (e.g. for Jira
            issues, this is the issue type such as Bug or Feature Request).
        content:
          $ref: '#/components/schemas/DocumentContent'
        containerDocument:
          $ref: '#/components/schemas/Document'
        parentDocument:
          $ref: '#/components/schemas/Document'
        title:
          type: string
          description: The title of the document.
        url:
          type: string
          description: A permalink for the document.
        metadata:
          $ref: '#/components/schemas/DocumentMetadata'
        sections:
          type: array
          description: A list of content sub-sections in the document, e.g. text blocks
            with different headings in a Drive doc or Confluence page.
          items:
            $ref: '#/components/schemas/DocumentSection'
    SearchProviderInfo:
      properties:
        name:
          type: string
          description: Name of the search provider.
        logoUrl:
          type: string
          description: URL to the provider's logo.
        searchLinkUrlTemplate:
          type: string
          description: URL template that can be used to perform the suggested search
            by replacing the {query} placeholder with the query suggestion.
      example:
        name: Google
        logo: https://app.glean.com/images/feather/globe.svg
        searchLinkUrlTemplate: https://www.google.com/search?q={query}&hl=en
    FacetFilterValue:
      properties:
        value:
          type: string
          example: Spreadsheet
        relationType:
          type: string
          enum:
          - EQUALS
          - ID_EQUALS
          - LT
          - GT
          example: EQUALS
        isNegated:
          type: boolean
          deprecated: true
          description: DEPRECATED - please use relationType instead
    FacetFilter:
      properties:
        fieldName:
          type: string
          example: owner
        values:
          type: array
          items:
            $ref: '#/components/schemas/FacetFilterValue'
          description: Within a single FacetFilter, the values are to be treated like
            an OR. For example, fieldName type with values [EQUALS Presentation, EQUALS
            Spreadsheet] means we want to show a document if it's a Presentation OR
            a Spreadsheet.
        groupName:
          type: string
          example: Spreadsheet
          description: Indicates the value of a facet, if any, that the given facet
            is grouped under. This is only used for nested facets, for example, fieldName
            could be owner and groupName would be Spreadsheet if showing all owners
            for spreadsheets as a nested facet.
      example:
        fieldName: type
        values:
        - value: Spreadsheet
          relationType: EQUALS
        - value: Presentation
          relationType: EQUALS
    FacetFilterSet:
      properties:
        filters:
          type: array
          items:
            $ref: '#/components/schemas/FacetFilter'
      description: Within a single FacetFilterSet, the filters are treated as AND.
        For example, owner Sumeet and type Spreadsheet shows documents that are by
        Sumeet AND are Spreadsheets.
    FacetBucketFilter:
      properties:
        facet:
          type: string
          description: The facet whose buckets should be filtered.
        prefix:
          type: string
          description: The per-term prefix that facet buckets should be filtered on.
    AuthToken:
      required:
      - accessToken
      - datasource
      properties:
        accessToken:
          type: string
        datasource:
          type: string
        scope:
          type: string
        tokenType:
          type: string
        authUser:
          description: Used by Google to indicate the index of the logged in user.
            Useful for generating hyperlinks that support multilogin.
          type: string
        expiration:
          description: Unix timestamp when this token expires (in seconds since epoch
            UTC).
          type: integer
          format: int64
      example:
        accessToken: 123abc
        datasource: gmail
        scope: email profile https://www.googleapis.com/auth/gmail.readonly
        tokenType: Bearer
        authUser: '1'
    DocumentSpec:
      oneOf:
      - type: object
        properties:
          url:
            type: string
            description: The URL of the document.
      - type: object
        properties:
          id:
            type: string
            description: The ID of the document.
      - type: object
        properties:
          ugcType:
            type: string
            enum:
            - ANNOUNCEMENTS
            - ANSWERS
            - COLLECTIONS
            - SHORTCUTS
            description: The type of the user generated content (UGC datasource).
          contentId:
            type: integer
            description: The id for user generated content.
          docType:
            type: string
            description: The specific type of the user generated content type.
    RestrictionFilters:
      properties:
        containerSpecs:
          description: 'Specifications for containers that should be used as part
            of the restriction (include/exclude). Memberships are recursively defined
            for a subset of datasources (currently: SharePoint, OneDrive, Google Drive,
            and Confluence). Please contact the Glean team to enable this for more
            datasources. Recursive memberships do not apply for Collections.'
          type: array
          items:
            $ref: '#/components/schemas/DocumentSpec'
    SearchRequestOptions:
      required:
      - facetBucketSize
      properties:
        datasourceFilter:
          type: string
          description: Filter results to a single datasource name (e.g. gmail, slack).
            All results are returned if missing.
        datasourcesFilter:
          type: array
          items:
            type: string
          description: Filter results to one or more datasources (e.g. gmail, slack).
            All results are returned if missing.
        queryOverridesFacetFilters:
          type: boolean
          description: If true, the operators in the query are taken to override any
            operators in facetFilters in the case of conflict. This is used to correctly
            set rewrittenFacetFilters and rewrittenQuery.
        facetFilters:
          type: array
          items:
            $ref: '#/components/schemas/FacetFilter'
          description: A list of filters for the query. An AND is assumed between
            different facetFilters. For example, owner Sumeet and type Spreadsheet
            shows documents that are by Sumeet AND are Spreadsheets.
        facetFilterSets:
          type: array
          items:
            $ref: '#/components/schemas/FacetFilterSet'
          description: A list of facet filter sets that will be OR'ed together. SearchRequestOptions
            where both facetFilterSets and facetFilters set are considered as bad
            request. Callers should set only one of these fields.
        facetBucketFilter:
          $ref: '#/components/schemas/FacetBucketFilter'
        facetBucketSize:
          type: integer
          description: The maximum number of FacetBuckets to return in each FacetResult.
        defaultFacets:
          type: array
          items:
            type: string
          description: Facets for which FacetResults should be fetched and that don't
            apply to a particular datasource. If specified, these values will replace
            the standard default facets (last_updated_at, from, etc.). The requested
            facets will be returned alongside datasource-specific facets if searching
            a single datasource.
        authTokens:
          type: array
          description: Auth tokens which may be used for non-indexed, federated results
            (e.g. Gmail).
          items:
            $ref: '#/components/schemas/AuthToken'
        fetchAllDatasourceCounts:
          type: boolean
          description: Hints that the QE should return result counts (via the datasource
            facet result) for all supported datasources, rather than just those specified
            in the datasource[s]Filter
        responseHints:
          type: array
          description: Array of hints containing which fields should be populated
            in the response.
          items:
            type: string
            description: Hints for the response content.
            x-enumDescriptions:
              ALL_RESULT_COUNTS: Return result counts for each result set which has
                non-zero results, even when the request itself is limited to a subset.
              FACET_RESULTS: Return only facet results.
              QUERY_METADATA: Returns result counts for each result set which has
                non-zero results, as well as other information about the search such
                as suggested spelling corrections.
              RESULTS: Return search result documents.
              SPELLCHECK_METADATA: Return metadata pertaining to spellcheck results.
            enum:
            - ALL_RESULT_COUNTS
            - FACET_RESULTS
            - QUERY_METADATA
            - RESULTS
            - SPELLCHECK_METADATA
        timezoneOffset:
          type: integer
          description: The offset of the client's timezone in minutes from UTC. e.g.
            PDT is -420 because it's 7 hours behind UTC.
        disableSpellcheck:
          type: boolean
          description: Whether or not to disable spellcheck.
        disableQueryAutocorrect:
          type: boolean
          description: Disables automatic adjustment of the input query for spelling
            corrections or other reasons.
        returnLlmContentOverSnippets:
          type: boolean
          description: '[beta] Enables expanded content to be returned for LLM usage.
            The size of content per result returned should be modified using maxSnippetSize.
            Server may return less or more than what is specified in maxSnippetSize.
            For more details, https://docs.google.com/document/d/1CTOLSxWWT9WDEnHVLoCUaxbGYyXYP8kctPRF-RluSQY/edit.
            Requires sufficient permissions.'
        inclusions:
          $ref: '#/components/schemas/RestrictionFilters'
          description: A list of filters which restrict the search results to only
            the specified content.
        exclusions:
          $ref: '#/components/schemas/RestrictionFilters'
          description: A list of filters specifying content to avoid getting search
            results from. Exclusions take precendence over inclusions and other query
            parameters, such as search operators and search facets.
      example:
        datasourceFilter: JIRA
        datasourcesFilter:
        - JIRA
        queryOverridesFacetFilters: true
        facetFilters:
        - fieldName: fieldName
          values:
          - fieldValues
          - fieldValues
        - fieldName: fieldName
          values:
          - fieldValues
          - fieldValues
    TextRange:
      required:
      - startIndex
      description: A subsection of a given string to which some special formatting
        should be applied.
      properties:
        startIndex:
          type: integer
          description: The inclusive start index of the range.
        endIndex:
          type: integer
          description: The exclusive end index of the range.
        type:
          type: string
          enum:
          - BOLD
          - CITATION
          - LINK
        url:
          type: string
          description: The URL associated with the range, if applicable. For example,
            the linked URL for a LINK range.
        document:
          $ref: '#/components/schemas/Document'
          description: A document corresponding to the range, if applicable. For example,
            the cited document for a CITATION range.
    SearchRequestInputDetails:
      properties:
        hasCopyPaste:
          type: boolean
          description: Whether the associated query was at least partially copy-pasted.  If
            subsequent requests are issued after a copy-pasted query is constructed
            (e.g. with facet modifications), this bit should continue to be set for
            those requests.
      example:
        hasCopyPaste: true
    QuerySuggestion:
      required:
      - query
      properties:
        missingTerm:
          type: string
          description: A query term missing from the original query on which this
            suggestion is based.
        query:
          type: string
          description: The query being suggested (e.g. enforcing the missing term
            from the original query).
        searchProviderInfo:
          $ref: '#/components/schemas/SearchProviderInfo'
          description: Information about the search provider that generated this suggestion.
        label:
          type: string
          description: A user-facing description to display for the suggestion.
        datasource:
          type: string
          description: The datasource associated with the suggestion.
        requestOptions:
          $ref: '#/components/schemas/SearchRequestOptions'
        ranges:
          type: array
          items:
            $ref: '#/components/schemas/TextRange'
          description: The bolded ranges within the query of the QuerySuggestion.
        inputDetails:
          $ref: '#/components/schemas/SearchRequestInputDetails'
      example:
        query: app:github type:pull author:mortimer
        label: Mortimer's PRs
        datasource: github
    Person:
      required:
      - name
      - obfuscatedId
      properties:
        name:
          type: string
          description: The display name.
        obfuscatedId:
          type: string
          description: An opaque identifier that can be used to request metadata for
            a Person.
        relatedDocuments:
          type: array
          items:
            $ref: '#/components/schemas/RelatedDocuments'
          description: A list of documents related to this person.
        metadata:
          $ref: '#/components/schemas/PersonMetadata'
      example:
        name: George Clooney
        obfuscatedId: abc123
    Company:
      required:
      - name
      properties:
        name:
          type: string
          description: User-friendly display name.
        profileUrl:
          type: string
          description: Link to internal company company profile.
        websiteUrls:
          type: array
          description: Link to company's associated websites.
          items:
            type: string
        logoUrl:
          type: string
          description: The URL of the company's logo. Public, Glean-authenticated
            and Base64 encoded data URLs are all valid (but not third-party-authenticated
            URLs).
        location:
          type: string
          description: User facing string representing the company's location.
          example: New York City
        phone:
          type: string
          description: Phone number as a number string.
        fax:
          type: string
          description: Fax number as a number string.
        industry:
          type: string
          description: User facing string representing the company's industry.
          example: Finances
        annualRevenue:
          type: number
          format: double
          description: Average company's annual revenue for reference.
        numberOfEmployees:
          type: integer
          format: int64
          description: Average company's number of employees for reference.
        stockSymbol:
          type: string
          description: Company's stock symbol if company is public.
        foundedDate:
          type: string
          format: date
          description: The date when the company was founded.
        about:
          type: string
          description: User facing description of company.
          example: Financial, software, data, and media company headquartered in Midtown
            Manhattan, New York City
    DocumentCounts:
      type: object
      description: A map of {string, int} pairs representing counts of each document
        type associated with this customer.
      additionalProperties:
        type: integer
    CustomDataValue:
      properties:
        displayLabel:
          type: string
        stringValue:
          type: string
        stringListValue:
          type: array
          description: list of strings for multi-value properties
          items:
            type: string
        numberValue:
          type: number
        booleanValue:
          type: boolean
    CustomData:
      type: object
      description: Custom fields specific to individual datasources
      additionalProperties:
        $ref: '#/components/schemas/CustomDataValue'
    CustomerMetadata:
      properties:
        datasourceId:
          type: string
          description: The user visible id of the salesforce customer account.
        customData:
          $ref: '#/components/schemas/CustomData'
    Customer:
      required:
      - id
      - company
      properties:
        id:
          type: string
          description: Unique identifier.
        domains:
          type: array
          description: Link to company's associated website domains.
          items:
            type: string
        company:
          $ref: '#/components/schemas/Company'
        documentCounts:
          $ref: '#/components/schemas/DocumentCounts'
        poc:
          type: array
          description: A list of POC for company.
          items:
            $ref: '#/components/schemas/Person'
        metadata:
          $ref: '#/components/schemas/CustomerMetadata'
        mergedCustomers:
          type: array
          description: A list of Customers.
          items:
            $ref: '#/components/schemas/Customer'
        startDate:
          type: string
          format: date
          description: The date when the interaction with customer started.
        contractAnnualRevenue:
          type: number
          format: double
          description: Average contract annual revenue with that customer.
        notes:
          type: string
          description: User facing (potentially generated) notes about company.
          example: CIO is interested in trying out the product.
    RelatedObject:
      required:
      - id
      properties:
        id:
          type: string
          description: The ID of the related object
        metadata:
          type: object
          description: Some metadata of the object which can be displayed, while not
            having the actual object.
          properties:
            name:
              type: string
              description: Placeholder name of the object, not the relationship.
    RelatedObjectEdge:
      properties:
        objects:
          type: array
          items:
            $ref: '#/components/schemas/RelatedObject'
    RelatedObjects:
      properties:
        relatedObjects:
          type: object
          description: A list of objects related to a source object.
          additionalProperties:
            $ref: '#/components/schemas/RelatedObjectEdge'
    ScopeType:
      type: string
      description: Describes the scope for a ReadPermission, WritePermission, or GrantPermission
        object
      enum:
      - GLOBAL
      - OWN
    WritePermission:
      description: Describes the write permissions levels that a user has for a specific
        feature
      properties:
        scopeType:
          $ref: '#/components/schemas/ScopeType'
        create:
          type: boolean
          description: True if user has create permission for this feature and scope
        update:
          type: boolean
          description: True if user has update permission for this feature and scope
        delete:
          type: boolean
          description: True if user has delete permission for this feature and scope
    ObjectPermissions:
      properties:
        write:
          $ref: '#/components/schemas/WritePermission'
    PermissionedObject:
      properties:
        permissions:
          $ref: '#/components/schemas/ObjectPermissions'
          description: The permissions the current viewer has with respect to a particular
            object.
    PersonToTeamRelationship:
      required:
      - person
      type: object
      description: Metadata about the relationship of a person to a team.
      properties:
        person:
          $ref: '#/components/schemas/Person'
        relationship:
          type: string
          description: The team member's relationship to the team. This defaults to
            MEMBER if not set.
          default: MEMBER
          enum:
          - MEMBER
          - MANAGER
          - LEAD
          - POINT_OF_CONTACT
          - OTHER
        customRelationshipStr:
          type: string
          description: Displayed name for the relationship if relationship is set
            to `OTHER`.
        joinDate:
          type: string
          format: date-time
          description: The team member's start date
    TeamEmail:
      properties:
        email:
          type: string
          format: email
          description: An email address
        type:
          type: string
          enum:
          - PRIMARY
          - SECONDARY
          - ONCALL
          - OTHER
          default: OTHER
        isUserGenerated:
          type: boolean
          description: true iff the email was manually added by a user from within
            Glean (aka not from the original data source)
    DatasourceProfile:
      required:
      - datasource
      - handle
      properties:
        datasource:
          type: string
          example: github
          description: The datasource the profile is of.
        handle:
          type: string
          description: The display name of the entity in the given datasource.
        url:
          type: string
          description: URL to view the entity's profile.
        nativeAppUrl:
          type: string
          description: A deep link, if available, into the datasource's native application
            for the entity's platform (i.e. slack://...).
        isUserGenerated:
          type: boolean
          description: For internal use only. True iff the data source profile was
            manually added by a user from within Glean (aka not from the original
            data source)
    Team:
      allOf:
      - $ref: '#/components/schemas/RelatedObjects'
      - $ref: '#/components/schemas/PermissionedObject'
      - type: object
        required:
        - id
        - name
        properties:
          id:
            type: string
            description: Unique identifier
          name:
            type: string
            description: Team name
          description:
            type: string
            description: A description of the team
          businessUnit:
            type: string
            description: Typically the highest level organizational unit; generally
              applies to bigger companies with multiple distinct businesses.
          department:
            type: string
            description: An organizational unit where everyone has a similar task,
              e.g. `Engineering`.
          photoUrl:
            type: string
            format: url
            description: A link to the team's photo.
          bannerUrl:
            type: string
            format: url
            description: A link to the team's banner photo.
          externalLink:
            type: string
            format: uri
            description: Link to a team page on the internet or your company's intranet
          members:
            type: array
            description: The members on this team
            items:
              $ref: '#/components/schemas/PersonToTeamRelationship'
          memberCount:
            type: integer
            description: Number of members on this team (recursive; includes all individuals
              that belong to this team, and all individuals that belong to a subteam
              within this team)
          emails:
            type: array
            description: The emails for this team
            items:
              $ref: '#/components/schemas/TeamEmail'
          datasourceProfiles:
            type: array
            description: The datasource profiles of the team
            items:
              $ref: '#/components/schemas/DatasourceProfile'
          datasource:
            type: string
            description: the data source of the team, e.g. GDRIVE
          createdFrom:
            type: string
            description: For teams created from docs, the doc title. Otherwise empty.
          lastUpdatedAt:
            type: string
            format: date-time
            description: when this team was last updated.
          status:
            type: string
            description: whether this team is fully processed or there are still unprocessed
              operations that'll affect it
            default: PROCESSED
            enum:
            - PROCESSED
            - QUEUED_FOR_CREATION
            - QUEUED_FOR_DELETION
          canBeDeleted:
            type: boolean
            description: can this team be deleted. Some manually ingested teams like
              GCS_CSV or PUSH_API cannot
            default: true
          loggingId:
            type: string
            description: The logging id of the team used in scrubbed logs, client
              analytics, and metrics.
    CustomEntityMetadata:
      properties:
        customData:
          $ref: '#/components/schemas/CustomData'
    GroupType:
      type: string
      description: The type of user group
      enum:
      - DEPARTMENT
      - ALL
      - TEAM
      - JOB_TITLE
      - ROLE_TYPE
      - LOCATION
      - REGION
      - EXTERNAL_GROUP
    Group:
      required:
      - type
      - id
      properties:
        type:
          $ref: '#/components/schemas/GroupType'
        id:
          type: string
          description: A unique identifier for the group. May be the same as name.
        name:
          type: string
          description: Name of the group.
    UserRole:
      type: string
      description: A user's role with respect to a specific document.
      enum:
      - OWNER
      - VIEWER
      - ANSWER_MODERATOR
      - EDITOR
      - VERIFIER
    UserRoleSpecification:
      required:
      - role
      properties:
        sourceDocumentSpec:
          $ref: '#/components/schemas/DocumentSpec'
          description: The document spec of the object this role originates from.
            The object this role is included with will usually have the same information
            as this document spec, but if the role is inherited, then the document
            spec refers to the parent document that the role came from.
        person:
          $ref: '#/components/schemas/Person'
        group:
          $ref: '#/components/schemas/Group'
        role:
          $ref: '#/components/schemas/UserRole'
    CustomEntity:
      allOf:
      - $ref: '#/components/schemas/PermissionedObject'
      - type: object
        properties:
          id:
            type: string
            description: Unique identifier.
          title:
            type: string
            description: Title or name of the custom entity.
          datasource:
            type: string
            description: The datasource the custom entity is from.
          objectType:
            type: string
            description: The type of the entity. Interpretation is specific to each
              datasource
          metadata:
            $ref: '#/components/schemas/CustomEntityMetadata'
          roles:
            type: array
            description: A list of user roles for the custom entity explicitly granted
              by the owner.
            items:
              $ref: '#/components/schemas/UserRoleSpecification'
    AnswerId:
      properties:
        id:
          type: integer
          description: The opaque ID of the Answer.
          example: 3
    AnswerDocId:
      properties:
        docId:
          type: string
          description: Glean Document ID of the Answer. The Glean Document ID is supported
            for cases where the Answer ID isn't available. If both are available,
            using the Answer ID is preferred.
          example: ANSWERS_answer_3
    AnswerMutableProperties:
      properties:
        question:
          type: string
          example: Why is the sky blue?
        questionVariations:
          type: array
          description: Additional ways of phrasing this question.
          items:
            type: string
        bodyText:
          type: string
          description: The plain text answer to the question.
          example: From https://en.wikipedia.org/wiki/Diffuse_sky_radiation, the sky
            is blue because blue light is more strongly scattered than longer-wavelength
            light.
        boardId:
          type: integer
          description: The parent board ID of this Answer, or 0 if it's a floating
            Answer.
        audienceFilters:
          type: array
          description: Filters which restrict who should see the answer. Values are
            taken from the corresponding filters in people search.
          items:
            $ref: '#/components/schemas/FacetFilter'
        addedRoles:
          type: array
          description: A list of user roles for the answer added by the owner.
          items:
            $ref: '#/components/schemas/UserRoleSpecification'
        removedRoles:
          type: array
          description: A list of user roles for the answer removed by the owner.
          items:
            $ref: '#/components/schemas/UserRoleSpecification'
        roles:
          type: array
          description: A list of roles for this answer explicitly granted by an owner,
            editor, or admin.
          items:
            $ref: '#/components/schemas/UserRoleSpecification'
        sourceDocumentSpec:
          $ref: '#/components/schemas/DocumentSpec'
        sourceType:
          type: string
          enum:
          - DOCUMENT
          - ASSISTANT
    StructuredText:
      allOf:
      - $ref: '#/components/schemas/StructuredTextMutableProperties'
      - type: object
        properties:
          structuredList:
            type: array
            items:
              $ref: '#/components/schemas/StructuredTextItem'
            description: An array of objects each of which contains either a string
              or a link which optionally corresponds to a document.
    AnswerLike:
      properties:
        user:
          $ref: '#/components/schemas/Person'
        createTime:
          type: string
          format: date-time
          description: The time the user liked the answer in ISO format (ISO 8601).
    AnswerLikes:
      required:
      - likedBy
      - likedByUser
      - numLikes
      properties:
        likedBy:
          type: array
          items:
            $ref: '#/components/schemas/AnswerLike'
        likedByUser:
          type: boolean
          description: Whether the user in context liked the answer.
        numLikes:
          type: integer
          description: The total number of likes for the answer.
    Reminder:
      required:
      - assignee
      - remindAt
      properties:
        assignee:
          $ref: '#/components/schemas/Person'
        requestor:
          $ref: '#/components/schemas/Person'
        remindAt:
          type: integer
          description: Unix timestamp for when the reminder should trigger (in seconds
            since epoch UTC).
        createdAt:
          type: integer
          description: Unix timestamp for when the reminder was first created (in
            seconds since epoch UTC).
        reason:
          type: string
          description: An optional free-text reason for the reminder. This is particularly
            useful when a reminder is used to ask for verification from another user
            (for example, "Duplicate", "Incomplete", "Incorrect").
    TimePoint:
      properties:
        epochSeconds:
          type: integer
          description: Epoch seconds. Has precedence over daysFromNow.
        daysFromNow:
          type: integer
          description: The number of days from now. Specification relative to current
            time. Can be negative.
    Period:
      properties:
        minDaysFromNow:
          type: integer
          description: DEPRECATED - The number of days from now in the past to define
            upper boundary of time period.
          deprecated: true
        maxDaysFromNow:
          type: integer
          description: DEPRECATED - The number of days from now in the past to define
            lower boundary of time period.
          deprecated: true
        start:
          $ref: '#/components/schemas/TimePoint'
        end:
          $ref: '#/components/schemas/TimePoint'
    CountInfo:
      required:
      - count
      properties:
        count:
          type: integer
          description: The counter value
        period:
          $ref: '#/components/schemas/Period'
        org:
          type: string
          description: The unit of organization over which we did the count aggregation,
            e.g. org (department) or company
    VerificationMetadata:
      required:
      - documentId
      properties:
        lastVerifier:
          $ref: '#/components/schemas/Person'
        lastVerificationTs:
          type: integer
          description: The unix timestamp of the verification (in seconds since epoch
            UTC).
        expirationTs:
          type: integer
          description: The unix timestamp of the verification expiration if applicable
            (in seconds since epoch UTC).
        document:
          $ref: '#/components/schemas/Document'
        reminders:
          type: array
          items:
            $ref: '#/components/schemas/Reminder'
          description: Info about all outstanding verification reminders for the document
            if exists.
        lastReminder:
          $ref: '#/components/schemas/Reminder'
        visitorCount:
          type: array
          items:
            $ref: '#/components/schemas/CountInfo'
          description: Number of visitors to the document during included time periods.
        candidateVerifiers:
          type: array
          items:
            $ref: '#/components/schemas/Person'
          description: List of potential verifiers for the document e.g. old verifiers
            and/or users with view/edit permissions.
    Verification:
      required:
      - state
      properties:
        state:
          type: string
          enum:
          - UNVERIFIED
          - VERIFIED
          - DEPRECATED
          description: The verification state for the document.
        metadata:
          $ref: '#/components/schemas/VerificationMetadata'
    CollectionBaseMutableProperties:
      required:
      - name
      properties:
        name:
          type: string
          description: The unique name of the Collection.
        description:
          type: string
          description: A brief summary of the Collection's contents.
        addedRoles:
          type: array
          description: A list of added user roles for the Collection.
          items:
            $ref: '#/components/schemas/UserRoleSpecification'
        removedRoles:
          type: array
          description: A list of removed user roles for the Collection.
          items:
            $ref: '#/components/schemas/UserRoleSpecification'
        audienceFilters:
          type: array
          items:
            $ref: '#/components/schemas/FacetFilter'
          description: Filters which restrict who should see this Collection. Values
            are taken from the corresponding filters in people search.
    AnswerBoardMutableProperties:
      allOf:
      - $ref: '#/components/schemas/CollectionBaseMutableProperties'
    AnswerBoard:
      allOf:
      - $ref: '#/components/schemas/AnswerBoardMutableProperties'
      - $ref: '#/components/schemas/PermissionedObject'
      - type: object
        required:
        - id
        - description
        properties:
          id:
            type: integer
            description: The unique ID of the Answer Board.
          createTime:
            type: string
            format: date-time
          updateTime:
            type: string
            format: date-time
          creator:
            $ref: '#/components/schemas/Person'
          updatedBy:
            $ref: '#/components/schemas/Person'
          itemCount:
            type: integer
            description: The number of items currently in the Answer Board. Separated
              from the actual items so we can grab the count without items.
          roles:
            type: array
            description: A list of user roles for the Answer Board.
            items:
              $ref: '#/components/schemas/UserRoleSpecification'
    Thumbnail:
      properties:
        photoId:
          type: string
          description: Photo id if the thumbnail is from splash.
        url:
          type: string
          description: Thumbnail URL. This can be user provided image and/or from
            downloaded images hosted by Glean.
    CollectionMutableProperties:
      allOf:
      - $ref: '#/components/schemas/CollectionBaseMutableProperties'
      - type: object
        required:
        - name
        properties:
          icon:
            type: string
            description: The emoji icon of this Collection.
          adminLocked:
            type: boolean
            description: Indicates whether edits are allowed for everyone or only
              admins.
          parentId:
            type: integer
            description: The parent of this Collection, or 0 if it's a top-level Collection.
          thumbnail:
            $ref: '#/components/schemas/Thumbnail'
          allowedDatasource:
            type: string
            description: The datasource type this Collection can hold.
    CollectionItemMutableProperties:
      properties:
        name:
          type: string
          description: The optional name of the Collection item.
        description:
          type: string
          description: A helpful description of why this CollectionItem is in the
            Collection that it's in.
        icon:
          type: string
          description: The emoji icon for this CollectionItem. Only used for Text
            type items.
    UserGeneratedContentId:
      properties:
        id:
          type: integer
          description: The opaque id of the user generated content.
    ShortcutMutableProperties:
      properties:
        inputAlias:
          type: string
          description: Link text following go/ prefix as entered by the user.
        destinationUrl:
          type: string
          description: Destination URL for the shortcut.
        destinationDocumentId:
          type: string
          description: Glean Document ID for the URL, if known.
        description:
          type: string
          description: A short, plain text blurb to help people understand the intent
            of the shortcut.
        unlisted:
          type: boolean
          description: Whether this shortcut is unlisted or not. Unlisted shortcuts
            are visible to author + admins only.
        urlTemplate:
          type: string
          description: For variable shortcuts, contains the URL template; note, `destinationUrl`
            contains default URL.
        addedRoles:
          type: array
          description: A list of user roles added for the Shortcut.
          items:
            $ref: '#/components/schemas/UserRoleSpecification'
        removedRoles:
          type: array
          description: A list of user roles removed for the Shortcut.
          items:
            $ref: '#/components/schemas/UserRoleSpecification'
    ShortcutMetadata:
      properties:
        createdBy:
          $ref: '#/components/schemas/Person'
        createTime:
          type: string
          format: date-time
          description: The time the shortcut was created in ISO format (ISO 8601).
        updatedBy:
          $ref: '#/components/schemas/Person'
        updateTime:
          type: string
          format: date-time
          description: The time the shortcut was updated in ISO format (ISO 8601).
        destinationDocument:
          $ref: '#/components/schemas/Document'
          description: Document that corresponds to the destination URL, if applicable.
        intermediateUrl:
          type: string
          description: The URL from which the user is then redirected to the destination
            URL. Full replacement for https://go/<inputAlias>.
        viewPrefix:
          type: string
          description: The part of the shortcut preceding the input alias when used
            for showing shortcuts to users. Should end with "/". e.g. "go/" for native
            shortcuts.
        isExternal:
          type: boolean
          description: Indicates whether a shortcut is native or external.
        editUrl:
          type: string
          description: The URL using which the user can access the edit page of the
            shortcut.
    Shortcut:
      allOf:
      - $ref: '#/components/schemas/UserGeneratedContentId'
      - $ref: '#/components/schemas/ShortcutMutableProperties'
      - $ref: '#/components/schemas/PermissionedObject'
      - $ref: '#/components/schemas/ShortcutMetadata'
      - type: object
        required:
        - inputAlias
        properties:
          alias:
            type: string
            description: canonical link text following go/ prefix where hyphen/underscore
              is removed.
          title:
            type: string
            description: Title for the Go Link
          roles:
            type: array
            description: A list of user roles for the Go Link.
            items:
              $ref: '#/components/schemas/UserRoleSpecification'
    Collection:
      allOf:
      - $ref: '#/components/schemas/CollectionMutableProperties'
      - $ref: '#/components/schemas/PermissionedObject'
      - type: object
        required:
        - id
        - description
        properties:
          id:
            type: integer
            description: The unique ID of the Collection.
          createTime:
            type: string
            format: date-time
          updateTime:
            type: string
            format: date-time
          creator:
            $ref: '#/components/schemas/Person'
          updatedBy:
            $ref: '#/components/schemas/Person'
          itemCount:
            type: integer
            description: The number of items currently in the Collection. Separated
              from the actual items so we can grab the count without items.
          childCount:
            type: integer
            description: The number of children Collections. Separated from the actual
              children so we can grab the count without children.
          items:
            type: array
            items:
              $ref: '#/components/schemas/CollectionItem'
            description: The items in this Collection.
          pinMetadata:
            $ref: '#/components/schemas/CollectionPinnedMetadata'
            description: Metadata having what categories this Collection is pinned
              to and the eligible categories to pin to
          shortcuts:
            type: array
            items:
              type: string
            description: The names of the shortcuts (Go Links) that point to this
              Collection.
          children:
            type: array
            items:
              $ref: '#/components/schemas/Collection'
            description: The children Collections of this Collection.
          roles:
            type: array
            description: A list of user roles for the Collection.
            items:
              $ref: '#/components/schemas/UserRoleSpecification'
    CollectionItem:
      allOf:
      - $ref: '#/components/schemas/CollectionItemMutableProperties'
      - type: object
        required:
        - collectionId
        - itemType
        properties:
          collectionId:
            type: integer
            description: The Collection ID of the Collection that this CollectionItem
              belongs in.
          documentId:
            type: string
            description: If this CollectionItem is indexed, the Glean Document ID
              of that document.
          url:
            type: string
            description: The URL of this CollectionItem.
          itemId:
            type: string
            description: Unique identifier for the item within the Collection it belongs
              to.
          createdBy:
            $ref: '#/components/schemas/Person'
            description: The person who added this Collection item.
          createdAt:
            type: string
            format: date-time
            description: Unix timestamp for when the item was first added (in seconds
              since epoch UTC).
          document:
            $ref: '#/components/schemas/Document'
            description: The Document this CollectionItem corresponds to (omitted
              if item is a non-indexed URL).
          shortcut:
            $ref: '#/components/schemas/Shortcut'
            description: The Shortcut this CollectionItem corresponds to (only included
              if item URL is for a Go Link).
          collection:
            $ref: '#/components/schemas/Collection'
            description: The Collection this CollectionItem corresponds to (only included
              if item type is COLLECTION).
          itemType:
            type: string
            enum:
            - DOCUMENT
            - TEXT
            - URL
            - COLLECTION
    CollectionPinnableCategories:
      type: string
      description: Categories a Collection can be pinned to.
      enum:
      - COMPANY_RESOURCE
      - DEPARTMENT_RESOURCE
      - TEAM_RESOURCE
    CollectionPinnableTargets:
      type: string
      description: What targets can a Collection be pinned to.
      enum:
      - RESOURCE_CARD
      - TEAM_PROFILE_PAGE
    CollectionPinTarget:
      required:
      - category
      properties:
        category:
          $ref: '#/components/schemas/CollectionPinnableCategories'
        value:
          type: string
          description: Optional. If category supports values, then the additional
            value for the category e.g. department name for DEPARTMENT_RESOURCE, team
            name/id for TEAM_RESOURCE and so on.
        target:
          $ref: '#/components/schemas/CollectionPinnableTargets'
    CollectionPinMetadata:
      required:
      - id
      - target
      properties:
        id:
          type: integer
          description: The ID of the Collection.
        target:
          $ref: '#/components/schemas/CollectionPinTarget'
    CollectionPinnedMetadata:
      required:
      - pinnedCategories
      - eligibleCategoriesForPinning
      properties:
        existingPins:
          type: array
          items:
            $ref: '#/components/schemas/CollectionPinTarget'
          description: List of targets this Collection is pinned to.
        eligiblePins:
          type: array
          items:
            $ref: '#/components/schemas/CollectionPinMetadata'
          description: List of targets this Collection can be pinned to, excluding
            the targets this Collection is already pinned to. We also include Collection
            ID already is pinned to each eligible target, which will be 0 if the target
            has no pinned Collection.
    Answer:
      allOf:
      - $ref: '#/components/schemas/AnswerId'
      - $ref: '#/components/schemas/AnswerDocId'
      - $ref: '#/components/schemas/AnswerMutableProperties'
      - $ref: '#/components/schemas/PermissionedObject'
      - type: object
        required:
        - id
        properties:
          combinedAnswerText:
            $ref: '#/components/schemas/StructuredText'
          likes:
            $ref: '#/components/schemas/AnswerLikes'
          author:
            $ref: '#/components/schemas/Person'
          createTime:
            type: string
            format: date-time
            description: The time the answer was created in ISO format (ISO 8601).
          updateTime:
            type: string
            format: date-time
            description: The time the answer was last updated in ISO format (ISO 8601).
          updatedBy:
            $ref: '#/components/schemas/Person'
          verification:
            $ref: '#/components/schemas/Verification'
          board:
            $ref: '#/components/schemas/AnswerBoard'
            description: The parent board this answer is in.
          collections:
            type: array
            description: The collections to which the answer belongs.
            items:
              $ref: '#/components/schemas/Collection'
          documentCategory:
            type: string
            description: The document's document_category(.proto).
          sourceDocument:
            $ref: '#/components/schemas/Document'
    SearchResult:
      required:
      - url
      allOf:
      - $ref: '#/components/schemas/Result'
      - type: object
        properties:
          document:
            $ref: '#/components/schemas/Document'
          title:
            type: string
          url:
            type: string
          nativeAppUrl:
            type: string
            description: A deep link, if available, into the datasource's native application
              for the user's platform (e.g. slack://...).
          snippets:
            type: array
            items:
              $ref: '#/components/schemas/SearchResultSnippet'
            description: Text content from the result document which contains search
              query terms, if available.
          fullText:
            type: string
            description: The full body text of the result if not already contained
              in the snippets. Only populated for conversation results (e.g. results
              from a messaging app such as Slack).
          fullTextList:
            type: array
            description: The full body text of the result if not already contained
              in the snippets; each item in the array represents a separate line in
              the original text. Only populated for conversation results (e.g. results
              from a messaging app such as Slack).
            items:
              type: string
          relatedResults:
            type: array
            items:
              $ref: '#/components/schemas/RelatedDocuments'
            description: A list of results related to this search result. Eg. for
              conversation results it contains individual messages from the conversation
              document which will be shown on SERP.
          clusteredResults:
            type: array
            description: A list of results that should be displayed as associated
              with this result.
            items:
              $ref: '#/components/schemas/SearchResult'
          allClusteredResults:
            type: array
            description: A list of results that should be displayed as associated
              with this result.
            items:
              $ref: '#/components/schemas/ClusterGroup'
          attachmentCount:
            type: integer
            description: The total number of attachments.
          attachments:
            type: array
            description: A (potentially partial) list of results representing documents
              attached to the main result document.
            items:
              $ref: '#/components/schemas/SearchResult'
          backlinkResults:
            type: array
            description: A list of results that should be displayed as backlinks of
              this result in reverse chronological order.
            items:
              $ref: '#/components/schemas/SearchResult'
          clusterType:
            $ref: '#/components/schemas/ClusterTypeEnum'
          mustIncludeSuggestions:
            $ref: '#/components/schemas/QuerySuggestionList'
          querySuggestion:
            $ref: '#/components/schemas/QuerySuggestion'
          prominence:
            $ref: '#/components/schemas/SearchResultProminenceEnum'
          attachmentContext:
            type: string
            description: Additional context for the relationship between the result
              and the document it's attached to.
          pins:
            type: array
            description: A list of pins associated with this search result.
            items:
              $ref: '#/components/schemas/PinDocument'
      example:
        snippets:
        - snippet: snippet
          mimeType: mimeType
        metadata:
          container: container
          createTime: '2000-01-23T04:56:07.000Z'
          datasource: datasource
          author:
            name: name
          documentId: documentId
          updateTime: '2000-01-23T04:56:07.000Z'
          mimeType: mimeType
          objectType: objectType
        title: title
        url: https://example.com/foo/bar
        nativeAppUrl: slack://foo/bar
        mustIncludeSuggestions:
        - missingTerm: container
          query: container
    ExtractedQnA:
      properties:
        heading:
          type: string
          description: Heading text that was matched to produce this result.
        question:
          type: string
          description: Question text that was matched to produce this result.
        questionResult:
          $ref: '#/components/schemas/SearchResult'
    CalendarAttendee:
      required:
      - person
      properties:
        isOrganizer:
          type: boolean
          description: Whether or not this attendee is an organizer.
        isInGroup:
          type: boolean
          description: Whether or not this attendee is in a group. Needed temporarily
            at least to support both flat attendees and tree for compatibility.
        person:
          $ref: '#/components/schemas/Person'
        groupAttendees:
          type: array
          description: If this attendee is a group, represents the list of individual
            attendees in the group.
          items:
            $ref: '#/components/schemas/CalendarAttendee'
        responseStatus:
          type: string
          enum:
          - ACCEPTED
          - DECLINED
          - NO_RESPONSE
          - TENTATIVE
    CalendarAttendees:
      properties:
        people:
          type: array
          items:
            $ref: '#/components/schemas/CalendarAttendee'
          description: Full details of some of the attendees of this event
        isLimit:
          type: boolean
          description: Whether the total count of the people returned is at the retrieval
            limit.
        total:
          type: integer
          description: Total number of attendees in this event.
        numAccepted:
          type: integer
          description: Total number of attendees who have accepted this event.
        numDeclined:
          type: integer
          description: Total number of attendees who have declined this event.
        numNoResponse:
          type: integer
          description: Total number of attendees who have not responded to this event.
        numTentative:
          type: integer
          description: Total number of attendees who have responded tentatively (i.e.
            responded maybe) to this event.
    Meeting:
      properties:
        id:
          type: string
        title:
          type: string
        description:
          type: string
        startTime:
          type: string
          format: date-time
        endTime:
          type: string
          format: date-time
        attendees:
          $ref: '#/components/schemas/CalendarAttendees'
          description: The attendee list, including their response status
    AppResult:
      required:
      - datasource
      properties:
        datasource:
          type: string
          description: The app or other repository type this represents
        docType:
          type: string
          description: The datasource-specific type of the document (e.g. for Jira
            issues, this is the issue type such as Bug or Feature Request).
        mimeType:
          type: string
          description: Mimetype is used to differentiate between sub applications
            from a datasource (e.g. Sheets, Docs from Gdrive)
        iconUrl:
          type: string
          description: If there is available icon URL.
    CodeLine:
      properties:
        lineNumber:
          type: integer
        content:
          type: string
        ranges:
          type: array
          items:
            $ref: '#/components/schemas/TextRange'
          description: Index ranges depicting matched sections of the line
    Code:
      properties:
        repoName:
          type: string
        fileName:
          type: string
        fileUrl:
          type: string
        lines:
          type: array
          items:
            $ref: '#/components/schemas/CodeLine'
        isLastMatch:
          type: boolean
          description: Last file match for a repo
      example:
        repoName: scio
        fileName: README.md
        matches:
        - lineNumber: 1
          content: Welcome to the beginning
          ranges: []
        - lineNumber: 2
          content: Second line of the file
          ranges: []
        - lineNumber: 3
          content: hello world hello world
          ranges:
          - startindex: 0
            endIndex: 5
          - startIndex: 12
            endIndex: 17
    QuerySuggestionList:
      properties:
        suggestions:
          type: array
          items:
            $ref: '#/components/schemas/QuerySuggestion'
        person:
          $ref: '#/components/schemas/Person'
    RelatedDocuments:
      properties:
        relation:
          type: string
          description: How this document relates to the including entity.
          enum:
          - ATTACHMENT
          - CANONICAL
          - CASE
          - CONTACT
          - CONVERSATION_MESSAGES
          - EXPERT
          - FROM
          - HIGHLIGHT
          - OPPORTUNITY
          - RECENT
          - SOURCE
          - TICKET
          - TRANSCRIPT
          - WITH
          x-enumDescriptions:
            CANONICAL: Canonical documents for the entity, such as overview docs,
              architecture docs elastic.
        associatedEntityId:
          type: string
          description: Which entity in the response that this entity relates to. Relevant
            when there are multiple entities associated with the response (such as
            merged customers)
        querySuggestion:
          $ref: '#/components/schemas/QuerySuggestion'
        documents:
          type: array
          items:
            $ref: '#/components/schemas/Document'
          description: A truncated list of documents with this relation. TO BE DEPRECATED.
          deprecated: true
        results:
          type: array
          items:
            $ref: '#/components/schemas/SearchResult'
          description: A truncated list of documents associated with this relation.
            To be used in favor of `documents` because it contains a trackingToken.
    RelatedQuestion:
      properties:
        question:
          type: string
          description: The text of the related question
        answer:
          type: string
          description: The answer for the related question
        ranges:
          type: array
          items:
            $ref: '#/components/schemas/TextRange'
          description: Subsections of the answer string to which some special formatting
            should be applied (eg. bold)
    EntityType:
      type: string
      description: The type of entity.
      x-include-enum-class-prefix: true
      enum:
      - PERSON
      - PROJECT
      - CUSTOMER
    Disambiguation:
      type: object
      description: A disambiguation between multiple entities with the same name
      properties:
        name:
          type: string
          description: Name of the ambiguous entity
        id:
          type: string
          description: The unique id of the entity in the knowledge graph
        type:
          $ref: '#/components/schemas/EntityType'
    SearchResultSnippet:
      required:
      - snippet
      properties:
        snippet:
          type: string
          description: A matching snippet from the document. Query term matches are
            marked by the unicode characters uE006 and uE007.
        mimeType:
          type: string
          description: The mime type of the snippets, currently either text/plain
            or text/html.
        text:
          type: string
          description: A matching snippet from the document with no highlights.
        snippetTextOrdering:
          type: integer
          description: Used for sorting based off the snippet's location within all_snippetable_text
        ranges:
          type: array
          items:
            $ref: '#/components/schemas/TextRange'
          description: The bolded ranges within text.
        url:
          type: string
          description: A URL, generated based on availability, that links to the position
            of the snippet text or to the nearest header above the snippet text.
      example:
        snippet: snippet
        mimeType: mimeType
    StructuredResult:
      description: A single object that can support any object in the work graph.
        Only a single object will be populated.
      properties:
        document:
          $ref: '#/components/schemas/Document'
        person:
          $ref: '#/components/schemas/Person'
        customer:
          $ref: '#/components/schemas/Customer'
        team:
          $ref: '#/components/schemas/Team'
        customEntity:
          $ref: '#/components/schemas/CustomEntity'
        answer:
          $ref: '#/components/schemas/Answer'
        extractedQnA:
          $ref: '#/components/schemas/ExtractedQnA'
        meeting:
          $ref: '#/components/schemas/Meeting'
        app:
          $ref: '#/components/schemas/AppResult'
        collection:
          $ref: '#/components/schemas/Collection'
        answerBoard:
          $ref: '#/components/schemas/AnswerBoard'
        code:
          $ref: '#/components/schemas/Code'
        shortcut:
          $ref: '#/components/schemas/Shortcut'
        querySuggestions:
          $ref: '#/components/schemas/QuerySuggestionList'
        relatedDocuments:
          type: array
          items:
            $ref: '#/components/schemas/RelatedDocuments'
          description: A list of documents related to this structured result.
        relatedQuestion:
          $ref: '#/components/schemas/RelatedQuestion'
        disambiguation:
          $ref: '#/components/schemas/Disambiguation'
        snippets:
          description: Any snippets associated to the populated object.
          type: array
          items:
            $ref: '#/components/schemas/SearchResultSnippet'
        trackingToken:
          type: string
          description: An opaque token that represents this particular result in this
            particular query. To be used for /feedback reporting.
        prominence:
          type: string
          description: The level of visual distinction that should be given to a result.
          x-enumDescriptions:
            HERO: A high-confidence result that should feature prominently on the
              page.
            PROMOTED: May not be the best result but should be given additional visual
              distinction.
            STANDARD: Should not be distinct from any other results.
          enum:
          - HERO
          - PROMOTED
          - STANDARD
        source:
          type: string
          description: Source context for this result. Possible values depend on the
            result type.
          enum:
          - EXPERT_DETECTION
          - ENTITY_NLQ
    Result:
      properties:
        structuredResults:
          type: array
          description: An array of entities in the work graph retrieved via a data
            request.
          items:
            $ref: '#/components/schemas/StructuredResult'
        trackingToken:
          type: string
          description: An opaque token that represents this particular result in this
            particular query. To be used for /feedback reporting.
    ClusterTypeEnum:
      type: string
      description: The reason for inclusion of clusteredResults.
      enum:
      - SIMILAR
      - FRESHNESS
      - TITLE
      - CONTENT
      - NONE
      - THREAD_REPLY
      - THREAD_ROOT
      - PREFIX
      - SUFFIX
    ClusterGroup:
      required:
      - visibleCountHint
      properties:
        clusteredResults:
          type: array
          description: A list of results that should be displayed as associated with
            this result.
          items:
            $ref: '#/components/schemas/SearchResult'
        clusterType:
          $ref: '#/components/schemas/ClusterTypeEnum'
        visibleCountHint:
          type: integer
          description: The default number of results to display before truncating
            and showing a "see more" link
    SearchResultProminenceEnum:
      type: string
      description: 'The level of visual distinction that should be given to a result.

        '
      x-enumDescriptions:
        HERO: A high-confidence result that should feature prominently on the page.
        PROMOTED: May not be the best result but should be given additional visual
          distinction.
        STANDARD: Should not be distinct from any other results.
      enum:
      - HERO
      - PROMOTED
      - STANDARD
    PinDocumentMutableProperties:
      properties:
        queries:
          type: array
          description: The query strings for which the pinned result will show.
          items:
            type: string
        audienceFilters:
          type: array
          description: Filters which restrict who should see the pinned document.
            Values are taken from the corresponding filters in people search.
          items:
            $ref: '#/components/schemas/FacetFilter'
    PinDocument:
      allOf:
      - $ref: '#/components/schemas/PinDocumentMutableProperties'
      - type: object
        required:
        - documentId
        properties:
          id:
            type: string
            description: The opaque id of the pin.
          documentId:
            type: string
            description: The document which should be a pinned result.
          audienceFilters:
            type: array
            description: Filters which restrict who should see the pinned document.
              Values are taken from the corresponding filters in people search.
            items:
              $ref: '#/components/schemas/FacetFilter'
          attribution:
            $ref: '#/components/schemas/Person'
          updatedBy:
            $ref: '#/components/schemas/Person'
          createTime:
            type: string
            format: date-time
          updateTime:
            type: string
            format: date-time
    PersonTeam:
      description: Use `id` if you index teams via Glean, and use `name` and `externalLink`
        if you want to use your own team pages
      properties:
        id:
          type: string
          description: Unique identifier
        name:
          type: string
          description: Team name
        externalLink:
          type: string
          format: uri
          description: Link to a team page on the internet or your company's intranet
        relationship:
          type: string
          description: The team member's relationship to the team. This defaults to
            MEMBER if not set.
          default: MEMBER
          enum:
          - MEMBER
          - MANAGER
          - LEAD
          - POINT_OF_CONTACT
          - OTHER
        joinDate:
          type: string
          format: date-time
          description: The team member's start date
    StructuredLocation:
      type: object
      description: Detailed location with information about country, state, city etc.
      properties:
        deskLocation:
          type: string
          description: Desk number.
        timezone:
          type: string
          description: Location's timezone, e.g. UTC, PST.
        address:
          type: string
          description: Office address or name.
        city:
          type: string
          description: Name of the city.
        state:
          type: string
          description: State code.
        region:
          type: string
          description: Region information, e.g. NORAM, APAC.
        zipCode:
          type: string
          description: ZIP Code for the address.
        country:
          type: string
          description: Country name.
        countryCode:
          type: string
          description: Alpha-2 or Alpha-3 ISO 3166 country code, e.g. US or USA.
    SocialNetwork:
      required:
      - name
      - profileUrl
      properties:
        name:
          type: string
          description: Possible values are "twitter", "linkedin".
        profileName:
          type: string
          description: Human-readable profile name.
        profileUrl:
          type: string
          format: url
          description: Link to profile.
    PersonDistance:
      required:
      - name
      - obfuscatedId
      - distance
      properties:
        name:
          type: string
          description: The display name.
        obfuscatedId:
          type: string
          description: An opaque identifier that can be used to request metadata for
            a Person.
        distance:
          type: number
          format: float
          description: Distance to person, refer to PeopleDistance pipeline on interpretation
            of the value.
    CommunicationChannel:
      type: string
      enum:
      - COMMUNICATION_CHANNEL_EMAIL
      - COMMUNICATION_CHANNEL_SLACK
    ChannelInviteInfo:
      description: Information regarding the invite status of a person for a particular
        channel.
      properties:
        channel:
          description: Channel through which the invite was sent
          $ref: '#/components/schemas/CommunicationChannel'
        isAutoInvite:
          description: Bit that tracks if this invite was automatically sent or user-sent
          type: boolean
        inviter:
          description: The person that invited this person.
          $ref: '#/components/schemas/Person'
        inviteTime:
          type: string
          format: date-time
          description: The time this person was invited in ISO format (ISO 8601).
        reminderTime:
          type: string
          format: date-time
          description: The time this person was reminded in ISO format (ISO 8601)
            if a reminder was sent.
    InviteInfo:
      description: Information regarding the invite status of a person.
      properties:
        signUpTime:
          type: string
          format: date-time
          description: The time this person signed up in ISO format (ISO 8601).
        invites:
          type: array
          items:
            $ref: '#/components/schemas/ChannelInviteInfo'
          description: Latest invites received by the user for each channel
        inviter:
          deprecated: true
          description: The person that invited this person.
          $ref: '#/components/schemas/Person'
        inviteTime:
          deprecated: true
          type: string
          format: date-time
          description: The time this person was invited in ISO format (ISO 8601).
        reminderTime:
          deprecated: true
          type: string
          format: date-time
          description: The time this person was reminded in ISO format (ISO 8601)
            if a reminder was sent.
    ReadPermission:
      description: Describes the read permission level that a user has for a specific
        feature
      properties:
        scopeType:
          $ref: '#/components/schemas/ScopeType'
    ReadPermissions:
      description: Describes the read permission levels that a user has for permissioned
        features. Key must be PermissionedFeatureOrObject
      additionalProperties:
        type: array
        description: List of read permissions (for different scopes but same feature)
        items:
          $ref: '#/components/schemas/ReadPermission'
    WritePermissions:
      description: Describes the write permissions levels that a user has for permissioned
        features. Key must be PermissionedFeatureOrObject
      additionalProperties:
        type: array
        description: List of write permissions (for different scopes but same feature)
        items:
          $ref: '#/components/schemas/WritePermission'
    GrantPermission:
      description: Describes the grant permission level that a user has for a specific
        feature
      properties:
        scopeType:
          $ref: '#/components/schemas/ScopeType'
    GrantPermissions:
      description: Describes the grant permission levels that a user has for permissioned
        features. Key must be PermissionedFeatureOrObject
      additionalProperties:
        type: array
        description: List of grant permissions (for different scopes but same feature)
        items:
          $ref: '#/components/schemas/GrantPermission'
    Permissions:
      description: 'Describes the permissions levels that a user has for permissioned
        features. When the client sends this, Permissions.read and Permissions.write
        are the additional permissions granted to a user on top of what they have
        via their roles.

        When the server sends this, Permissions.read and Permissions.write are the
        complete (merged) set of permissions the user has, and Permissions.roles is
        just for display purposes.'
      properties:
        canAdminSearch:
          type: boolean
          description: TODO--deprecate in favor of the read and write properties.
            True if the user has access to /adminsearch
        canAdminClientApiGlobalTokens:
          type: boolean
          description: TODO--deprecate in favor of the read and write properties.
            True if the user can administrate client API tokens with global scope
        canDlp:
          type: boolean
          description: TODO--deprecate in favor of the read and write properties.
            True if the user has access to data loss prevention (DLP) features
        read:
          $ref: '#/components/schemas/ReadPermissions'
        write:
          $ref: '#/components/schemas/WritePermissions'
        grant:
          $ref: '#/components/schemas/GrantPermissions'
        role:
          type: string
          description: The roleId of the canonical role a user has. The displayName
            is equal to the roleId.
        roles:
          type: array
          description: The roleIds of the roles a user has.
          items:
            type: string
    CustomFieldValueStr:
      properties:
        strText:
          type: string
          description: Text field for string value.
    CustomFieldValueHyperlink:
      properties:
        urlAnchor:
          type: string
          description: Anchor text for hyperlink.
        urlLink:
          type: string
          description: Link for this URL.
    CustomFieldValuePerson:
      properties:
        person:
          $ref: '#/components/schemas/Person'
    CustomFieldValue:
      oneOf:
      - $ref: '#/components/schemas/CustomFieldValueStr'
      - $ref: '#/components/schemas/CustomFieldValueHyperlink'
      - $ref: '#/components/schemas/CustomFieldValuePerson'
    CustomFieldData:
      required:
      - label
      - values
      - displayable
      properties:
        label:
          type: string
          description: A user-facing label for this field.
        values:
          type: array
          items:
            $ref: '#/components/schemas/CustomFieldValue'
        displayable:
          type: boolean
          description: Determines whether the client should display this custom field
          default: true
    TimeInterval:
      required:
      - start
      - end
      properties:
        start:
          type: string
          description: The RFC3339 timestamp formatted start time of this event.
        end:
          type: string
          description: The RFC3339 timestamp formatted end time of this event.
    AnonymousEvent:
      description: A generic, light-weight calendar event.
      type: object
      properties:
        time:
          $ref: '#/components/schemas/TimeInterval'
        eventType:
          description: The nature of the event, for example "out of office".
          type: string
          enum:
          - DEFAULT
          - OUT_OF_OFFICE
    IconConfig:
      description: Defines how to render an icon
      properties:
        generatedBackgroundColorKey:
          type: string
        backgroundColor:
          type: string
        color:
          type: string
        key:
          type: string
        iconType:
          enum:
          - COLLECTION
          - CUSTOM
          - DATASOURCE
          - DATASOURCE_INSTANCE
          - FAVICON
          - FILE_TYPE
          - GENERATED_BACKGROUND
          - GLYPH
          - MIME_TYPE
          - NO_ICON
          - PERSON
          - REACTIONS
          - URL
        masked:
          type: boolean
          description: Whether the icon should be masked based on current theme.
        name:
          type: string
          description: The name of the icon if applicable, e.g. the glyph name for
            `IconType.GLYPH` icons.
        url:
          type: string
          description: The URL to an image to be displayed if applicable, e.g. the
            URL for `iconType.URL` icons.
      example:
        color: '#343CED'
        key: person_icon
        iconType: GLYPH
        name: user
    Badge:
      type: object
      description: Displays a user's accomplishment or milestone
      properties:
        key:
          type: string
          description: An auto generated unique identifier.
        displayName:
          type: string
          description: The badge name displayed to users
        iconConfig:
          $ref: '#/components/schemas/IconConfig'
        pinned:
          type: boolean
          description: The badge should be shown on the PersonAttribution
      example:
        key: deployment_name_new_hire
        displayName: New hire
        iconConfig:
          color: '#343CED'
          key: person_icon
          iconType: GLYPH
          name: user
    PersonMetadata:
      properties:
        type:
          type: string
          x-enumDescriptions:
            FULL_TIME: The person is a current full-time employee of the company.
            CONTRACTOR: The person is a current contractor of the company.
            NON_EMPLOYEE: The person object represents a non-human actor such as a
              service or admin account.
            FORMER_EMPLOYEE: The person is a previous employee of the company.
          enum:
          - FULL_TIME
          - CONTRACTOR
          - NON_EMPLOYEE
          - FORMER_EMPLOYEE
          example: FULL_TIME
        firstName:
          type: string
          description: The first name of the person
        lastName:
          type: string
          description: The last name of the person
        title:
          type: string
          description: Job title.
        businessUnit:
          type: string
          description: Typically the highest level organizational unit; generally
            applies to bigger companies with multiple distinct businesses.
        department:
          type: string
          description: An organizational unit where everyone has a similar task, e.g.
            `Engineering`.
        teams:
          description: Info about the employee's team(s).
          type: array
          items:
            $ref: '#/components/schemas/PersonTeam'
        departmentCount:
          type: integer
          description: The number of people in this person's department.
        email:
          type: string
          description: The user's primary email address
        aliasEmails:
          type: array
          description: Additional email addresses of this user beyond the primary,
            if any.
          items:
            type: string
        location:
          type: string
          description: User facing string representing the person's location.
        structuredLocation:
          $ref: '#/components/schemas/StructuredLocation'
        externalProfileLink:
          type: string
          description: Link to a customer's internal profile page. This is set to
            '#' when no link is desired.
        manager:
          $ref: '#/components/schemas/Person'
        managementChain:
          description: The chain of reporting in the company as far up as it goes.
            The last entry is this person's direct manager.
          type: array
          items:
            $ref: '#/components/schemas/Person'
        phone:
          type: string
          description: Phone number as a number string.
        timezone:
          type: string
          description: The timezone of the person. E.g. "Pacific Daylight Time".
        timezoneOffset:
          type: integer
          format: int64
          description: The offset of the person's timezone in seconds from UTC.
        photoUrl:
          type: string
          format: url
          description: The URL of the person's avatar. Public, glean-authenticated
            and Base64 encoded data URLs are all valid (but not third-party-authenticated
            URLs).
        uneditedPhotoUrl:
          type: string
          format: url
          description: The original photo URL of the person's avatar before any edits
            they made are applied
        bannerUrl:
          type: string
          format: url
          description: The URL of the person's banner photo.
        reports:
          type: array
          items:
            $ref: '#/components/schemas/Person'
        startDate:
          type: string
          description: The date when the employee started.
          format: date
        endDate:
          type: string
          format: date
          description: If a former employee, the last date of employment.
        bio:
          type: string
          description: Short biography or mission statement of the employee.
        pronoun:
          type: string
          description: She/her, He/his or other pronoun.
        orgSizeCount:
          type: integer
          description: The total recursive size of the people reporting to this person,
            or 1
        directReportsCount:
          type: integer
          description: The total number of people who directly report to this person,
            or 0
        preferredName:
          type: string
          description: The preferred name of the person, or a nickname.
        socialNetwork:
          description: List of social network profiles.
          type: array
          items:
            $ref: '#/components/schemas/SocialNetwork'
        datasourceProfile:
          type: array
          description: List of profiles this user has in different datasources / tools
            that they use.
          items:
            $ref: '#/components/schemas/DatasourceProfile'
        querySuggestions:
          $ref: '#/components/schemas/QuerySuggestionList'
        peopleDistance:
          type: array
          items:
            $ref: '#/components/schemas/PersonDistance'
          description: List of people and distances to those people from this person.
            Optionally with metadata.
        inviteInfo:
          $ref: '#/components/schemas/InviteInfo'
        isSignedUp:
          type: boolean
          description: Whether the user has signed into Glean at least once.
        lastExtensionUse:
          type: string
          format: date-time
          description: The last time the user has used the Glean extension in ISO
            8601 format.
        permissions:
          $ref: '#/components/schemas/Permissions'
        customFields:
          type: array
          description: User customizable fields for additional people information.
          items:
            $ref: '#/components/schemas/CustomFieldData'
        loggingId:
          type: string
          description: The logging id of the person used in scrubbed logs, tracking
            GA metrics.
        startDatePercentile:
          type: number
          format: float
          description: Percentage of the company that started strictly after this
            person. Between [0,100).
        busyEvents:
          type: array
          items:
            $ref: '#/components/schemas/AnonymousEvent'
          description: Intervals of busy time for this person, along with the type
            of event they're busy with.
        profileBoolSettings:
          type: object
          additionalProperties:
            type: boolean
          description: flag settings to indicate user profile settings for certain
            items
        badges:
          type: array
          items:
            $ref: '#/components/schemas/Badge'
          description: The badges that a user has earned over their lifetime.
        isOrgRoot:
          type: boolean
          description: Whether this person is a "root" node in their organization's
            hierarchy.
      example:
        department: Movies
        email: george@example.com
        location: Hollywood, CA
        phone: 6505551234
        photoUrl: https://example.com/george.jpg
        startDate: '2000-01-23'
        title: Actor
    DocumentVisibility:
      type: string
      description: The level of visibility of the document as understood by our system.
      x-enumDescriptions:
        PRIVATE: Only one person is able to see the document.
        SPECIFIC_PEOPLE_AND_GROUPS: Only specific people and/or groups can see the
          document.
        DOMAIN_LINK: Anyone in the domain with the link can see the document.
        DOMAIN_VISIBLE: Anyone in the domain can search for the document.
        PUBLIC_LINK: Anyone with the link can see the document.
        PUBLIC_VISIBLE: Anyone on the internet can search for the document.
      enum:
      - PRIVATE
      - SPECIFIC_PEOPLE_AND_GROUPS
      - DOMAIN_LINK
      - DOMAIN_VISIBLE
      - PUBLIC_LINK
      - PUBLIC_VISIBLE
    Reaction:
      properties:
        type:
          type: string
        count:
          type: integer
          description: The count of the reaction type on the document.
        reactors:
          type: array
          items:
            $ref: '#/components/schemas/Person'
        reactedByViewer:
          type: boolean
          description: Whether the user in context reacted with this type to the document.
    Share:
      description: Search endpoint will only fill out numDays ago since that's all
        we need to display shared badge; docmetadata endpoint will fill out all the
        fields so that we can display shared badge tooltip
      required:
      - numDaysAgo
      properties:
        numDaysAgo:
          type: integer
          description: The number of days that has passed since the share happened
        sharer:
          $ref: '#/components/schemas/Person'
        sharingDocument:
          $ref: '#/components/schemas/Document'
    DocumentInteractions:
      properties:
        numComments:
          type: integer
          description: The count of comments (thread replies in the case of slack).
        numReactions:
          type: integer
          description: The count of reactions on the document.
        reactions:
          type: array
          description: To be deprecated in favor of reacts. A (potentially non-exhaustive)
            list of reactions for the document.
          deprecated: true
          items:
            type: string
        reacts:
          type: array
          items:
            $ref: '#/components/schemas/Reaction'
        shares:
          type: array
          items:
            $ref: '#/components/schemas/Share'
          description: Describes instances of someone posting a link to this document
            in one of our indexed datasources.
        visitorCount:
          $ref: '#/components/schemas/CountInfo'
    ViewerInfo:
      properties:
        role:
          type: string
          enum:
          - ANSWER_MODERATOR
          - OWNER
          - VIEWER
          description: DEPRECATED - use permissions instead. Viewer's role on the
            specific document.
          deprecated: true
        lastViewedTime:
          type: string
          format: date-time
    IndexStatus:
      properties:
        lastCrawledTime:
          description: When the document was last crawled
          type: string
          format: date-time
        lastIndexedTime:
          description: When the document was last indexed
          type: string
          format: date-time
    DocumentMetadata:
      properties:
        datasource:
          type: string
        datasourceInstance:
          type: string
          description: The datasource instance from which the document was extracted.
        objectType:
          type: string
          description: The type of the result. Interpretation is specific to each
            datasource. (e.g. for Jira issues, this is the issue type such as Bug
            or Feature Request).
        container:
          type: string
          description: The name of the container (higher level parent, not direct
            parent) of the result. Interpretation is specific to each datasource (e.g.
            Channels for Slack, Project for Jira). cf. parentId
        containerId:
          type: string
          description: The Glean Document ID of the container. Uniquely identifies
            the container.
        superContainerId:
          type: string
          description: The Glean Document ID of the super container. Super container
            represents a broader abstraction that contains many containers. For example,
            whereas container might refer to a folder, super container would refer
            to a drive.
        parentId:
          type: string
          description: The id of the direct parent of the result. Interpretation is
            specific to each datasource (e.g. parent issue for Jira). cf. container
        mimeType:
          type: string
        documentId:
          type: string
          description: The index-wide unique identifier.
        loggingId:
          type: string
          description: A unique identifier used to represent the document in any logging
            or feedback requests in place of documentId.
        documentIdHash:
          type: string
          description: Hash of the Glean Document ID.
        createTime:
          type: string
          format: date-time
        updateTime:
          type: string
          format: date-time
        author:
          $ref: '#/components/schemas/Person'
        owner:
          $ref: '#/components/schemas/Person'
        mentionedPeople:
          type: array
          items:
            $ref: '#/components/schemas/Person'
          description: A list of people mentioned in the document.
        visibility:
          $ref: '#/components/schemas/DocumentVisibility'
        components:
          type: array
          description: A list of components this result is associated with. Interpretation
            is specific to each datasource. (e.g. for Jira issues, these are [components](https://confluence.atlassian.com/jirasoftwarecloud/organizing-work-with-components-764478279.html).)
          items:
            type: string
        status:
          type: string
          description: The status or disposition of the result. Interpretation is
            specific to each datasource. (e.g. for Jira issues, this is the issue
            status such as Done, In Progress or Will Not Fix).
        statusCategory:
          type: string
          description: The status category of the result. Meant to be more general
            than status. Interpretation is specific to each datasource.
        pins:
          type: array
          description: A list of stars associated with this result.  "Pin" is an older
            name.
          items:
            $ref: '#/components/schemas/PinDocument'
        priority:
          type: string
          description: The document priority. Interpretation is datasource specific.
        assignedTo:
          $ref: '#/components/schemas/Person'
        updatedBy:
          $ref: '#/components/schemas/Person'
        labels:
          type: array
          description: A list of tags for the document. Interpretation is datasource
            specific.
          items:
            type: string
        collections:
          type: array
          description: A list of collections that the document belongs to.
          items:
            $ref: '#/components/schemas/Collection'
        datasourceId:
          type: string
          description: The user-visible datasource specific id (e.g. Salesforce case
            number for example, GitHub PR number).
        interactions:
          $ref: '#/components/schemas/DocumentInteractions'
        verification:
          $ref: '#/components/schemas/Verification'
        viewerInfo:
          $ref: '#/components/schemas/ViewerInfo'
        permissions:
          $ref: '#/components/schemas/ObjectPermissions'
        visitCount:
          $ref: '#/components/schemas/CountInfo'
        shortcuts:
          type: array
          description: A list of shortcuts of which destination URL is for the document.
          items:
            $ref: '#/components/schemas/Shortcut'
        path:
          type: string
          description: For file datasources like onedrive/github etc this has the
            path to the file
        customData:
          $ref: '#/components/schemas/CustomData'
        documentCategory:
          type: string
          description: The document's document_category(.proto).
        contactPerson:
          $ref: '#/components/schemas/Person'
        thumbnail:
          $ref: '#/components/schemas/Thumbnail'
          description: A thumbnail image representing this document.
        indexStatus:
          $ref: '#/components/schemas/IndexStatus'
        ancestors:
          type: array
          description: A list of documents that are ancestors of this document in
            the hierarchy of the document's datasource, for example parent folders
            or containers. Ancestors can be of different types and some may not be
            indexed. Higher level ancestors appear earlier in the list.
          items:
            $ref: '#/components/schemas/Document'
      example:
        container: container
        parentId: JIRA_EN-1337
        createTime: '2000-01-23T04:56:07.000Z'
        datasource: datasource
        author:
          name: name
        documentId: documentId
        updateTime: '2000-01-23T04:56:07.000Z'
        mimeType: mimeType
        objectType: Feature Request
        components:
        - Backend
        - Networking
        status:
        - Done
        customData:
          someCustomField: someCustomValue
    DocumentSection:
      type: object
      properties:
        title:
          type: string
          description: The title of the document section (e.g. the section header).
        url:
          type: string
          description: The permalink of the document section.
    StructuredTextItem:
      properties:
        link:
          type: string
          example: https://en.wikipedia.org/wiki/Diffuse_sky_radiation
        document:
          $ref: '#/components/schemas/Document'
        text:
          type: string
          example: Because its wavelengths are shorter, blue light is more strongly
            scattered than the longer-wavelength lights, red or green. Hence the result
            that when looking at the sky away from the direct incident sunlight, the
            human eye perceives the sky to be blue.
    ChatRestrictionFilters:
      allOf:
      - $ref: '#/components/schemas/RestrictionFilters'
      - type: object
        properties:
          documentSpecs:
            type: array
            items:
              $ref: '#/components/schemas/DocumentSpec'
          datasourceInstances:
            type: array
            items:
              type: string
    ResultsRequest:
      properties:
        timestamp:
          type: string
          description: The ISO 8601 timestamp associated with the client request.
          format: date-time
        trackingToken:
          type: string
          description: A previously received trackingToken for a search associated
            with the same query. Useful for more requests and requests for other tabs.
        sessionInfo:
          $ref: '#/components/schemas/SessionInfo'
        sourceDocument:
          $ref: '#/components/schemas/Document'
          description: The document from which the ResultsRequest is issued, if any.
        pageSize:
          type: integer
          example: 100
          description: Hint to the server about how many results to send back. Server
            may return less or more. Structured results and clustered results don't
            count towards pageSize.
        maxSnippetSize:
          type: integer
          description: Hint to the server about how many characters long a snippet
            may be. Server may return less or more.
          example: 400
    SearchRequest:
      required:
      - query
      allOf:
      - $ref: '#/components/schemas/ResultsRequest'
      - type: object
        properties:
          query:
            type: string
            description: The search terms.
            example: vacation policy
          cursor:
            type: string
            description: Pagination cursor. A previously received opaque token representing
              the position in the overall results at which to start.
          resultTabIds:
            type: array
            items:
              type: string
            description: The unique IDs of the result tabs for which to fetch results.
              This will have precedence over datasource filters if both are specified
              and in conflict.
          inputDetails:
            $ref: '#/components/schemas/SearchRequestInputDetails'
          requestOptions:
            $ref: '#/components/schemas/SearchRequestOptions'
          timeoutMillis:
            type: integer
            description: Timeout in milliseconds for the request. A `408` error will
              be returned if handling the request takes longer.
            example: 5000
          people:
            type: array
            description: People associated with the search request. Hints to the server
              to fetch additional information for these people. Note that in this
              request, an email may be used as a person's obfuscatedId value.
            items:
              $ref: '#/components/schemas/Person'
          disableSpellcheck:
            type: boolean
            description: Whether or not to disable spellcheck.
      example:
        trackingToken: trackingToken
        query: vacation policy
        pageSize: 10
        requestOptions:
          facetFilters:
          - fieldName: type
            values:
            - value: article
              relationType: EQUALS
            - value: document
              relationType: EQUALS
          - fieldName: department
            values:
            - value: engineering
              relationType: EQUALS
    FollowupAction:
      description: A follow-up action that can be invoked by the user after a response.
        The action parameters are not included and need to be predicted/filled separately.
      properties:
        actionRunId:
          type: string
          description: Unique identifier for this actionRun recommendation event.
        actionInstanceId:
          type: string
          description: The ID of the action instance that will be invoked.
        actionId:
          type: string
          description: The ID of the associated action.
        recommendationText:
          type: string
          description: Text to be displayed to the user when recommending the action
            instance.
        actionLabel:
          type: string
          description: The label to be used when displaying a button to execute this
            action instance.
        userConfirmationRequired:
          type: boolean
          description: Whether user confirmation is needed before executing this action
            instance.
    GeneratedQna:
      properties:
        question:
          type: string
          description: Search query rephrased into a question.
        answer:
          type: string
          description: Answer generated for the given query or the generated question.
        followUpPrompts:
          type: array
          items:
            type: string
          description: List of all follow-up prompts generated for the given query
            or the generated question.
        followupActions:
          description: List of follow-up actions generated for the given query or
            the generated question.
          type: array
          items:
            $ref: '#/components/schemas/FollowupAction'
        ranges:
          type: array
          items:
            $ref: '#/components/schemas/TextRange'
          description: Answer subsections to mark with special formatting (citations,
            bolding etc)
        status:
          type: string
          enum:
          - COMPUTING
          - DISABLED
          - FAILED
          - NO_ANSWER
          - SKIPPED
          - STREAMING
          - SUCCEEDED
          - TIMEOUT
          description: Status of backend generating the answer
        cursor:
          type: string
          description: An opaque cursor representing the search request
        trackingToken:
          type: string
          description: An opaque token that represents this particular result in this
            particular query. To be used for /feedback reporting.
    InvalidOperatorValueError:
      properties:
        key:
          description: The operator key that has an invalid value.
          type: string
        value:
          description: The invalid operator value.
          type: string
    ErrorMessage:
      properties:
        source:
          description: The datasource this message relates to.
          type: string
        errorMessage:
          type: string
    ErrorInfo:
      properties:
        badGmailToken:
          type: boolean
          description: Indicates the gmail results could not be fetched due to bad
            token.
        badOutlookToken:
          type: boolean
          description: Indicates the outlook results could not be fetched due to bad
            token.
        invalidOperators:
          type: array
          description: Indicates results could not be fetched due to invalid operators
            in the query.
          items:
            $ref: '#/components/schemas/InvalidOperatorValueError'
        errorMessages:
          type: array
          items:
            $ref: '#/components/schemas/ErrorMessage'
    ResultsResponse:
      properties:
        trackingToken:
          type: string
          description: A token that should be passed for additional requests related
            to this request (such as more results requests).
        sessionInfo:
          $ref: '#/components/schemas/SessionInfo'
        results:
          type: array
          items:
            $ref: '#/components/schemas/SearchResult'
        structuredResults:
          type: array
          items:
            $ref: '#/components/schemas/StructuredResult'
        generatedQnaResult:
          $ref: '#/components/schemas/GeneratedQna'
        errorInfo:
          $ref: '#/components/schemas/ErrorInfo'
        requestID:
          type: string
          description: A platform-generated request ID to correlate backend logs.
        backendTimeMillis:
          type: integer
          format: int64
          description: Time in milliseconds the backend took to respond to the request.
          example: 1100
    BackendExperimentsContext:
      properties:
        experimentIds:
          type: array
          items:
            type: integer
            format: int64
          description: List of experiment ids for the corresponding request.
    SearchWarning:
      required:
      - warningType
      properties:
        warningType:
          type: string
          enum:
          - LONG_QUERY
          - QUOTED_PUNCTUATION
          - PUNCTUATION_ONLY
          - COPYPASTED_QUOTES
          - INVALID_OPERATOR
          - MAYBE_INVALID_FACET_QUERY
          description: The type of the warning.
        lastUsedTerm:
          type: string
          description: The last term we considered in the user's long query.
        quotesIgnoredQuery:
          type: string
          description: The query after ignoring/removing quotes.
        ignoredTerms:
          type: array
          items:
            type: string
          description: A list of query terms that were ignored when generating search
            results, if any. For example, terms containing invalid filters such as
            "updated:invalid_date" will be ignored.
    SearchResponseMetadata:
      properties:
        rewrittenQuery:
          type: string
          description: A cleaned up or updated version of the query to be displayed
            in the query box. Useful for mapping visual facets to search operators.
        searchedQuery:
          type: string
          description: The actual query used to perform search and return results.
        searchedQueryRanges:
          type: array
          items:
            $ref: '#/components/schemas/TextRange'
          description: The bolded ranges within the searched query.
        originalQuery:
          type: string
          description: The query text sent by the client in the request.
        querySuggestion:
          $ref: '#/components/schemas/QuerySuggestion'
          description: An alternative query to the one provided that may give better
            results, e.g. a spelling suggestion.
        additionalQuerySuggestions:
          $ref: '#/components/schemas/QuerySuggestionList'
          description: Other alternative queries that may provide better or more specific
            results than the original query.
        negatedTerms:
          type: array
          items:
            type: string
          description: A list of terms that were negated when processing the query.
        modifiedQueryWasUsed:
          type: boolean
          description: A different query was performed than the one requested.
        originalQueryHadNoResults:
          type: boolean
          description: No results were found for the original query. The usage of
            this bit in conjunction with modifiedQueryWasUsed will dictate whether
            the full page replacement is 0-result or few-result based.
        searchWarning:
          $ref: '#/components/schemas/SearchWarning'
        triggeredExpertDetection:
          type: boolean
          description: Whether the query triggered expert detection results in the
            People tab.
    FacetValue:
      properties:
        stringValue:
          type: string
          example: engineering
          description: The value that should be set in the FacetFilter when applying
            this filter to a search request.
        integerValue:
          type: integer
          example: 5
        displayLabel:
          type: string
          example: engineering
          description: An optional user-friendly label to display in place of the
            facet value.
        iconConfig:
          $ref: '#/components/schemas/IconConfig'
    FacetBucket:
      properties:
        count:
          type: integer
          description: Estimated number of results in this facet.
          example: 1
        datasource:
          type: string
          example: jira
          description: The datasource the value belongs to. This will be used by the
            all tab to show types across all datasources.
        percentage:
          type: integer
          description: Estimated percentage of results in this facet.
          example: 5
        value:
          $ref: '#/components/schemas/FacetValue'
    FacetResult:
      properties:
        sourceName:
          type: string
          description: The source of this facet (e.g. container_name, type, last_updated_at).
          example: container_name
        operatorName:
          type: string
          description: How to display this facet. Currently supportes 'SelectSingle'
            and 'SelectMultiple'.
          example: SelectMultiple
        buckets:
          type: array
          description: A list of unique buckets that exist within this result set.
          items:
            $ref: '#/components/schemas/FacetBucket'
        hasMoreBuckets:
          type: boolean
          description: Returns true if more buckets exist than those returned. Additional
            buckets can be retrieve by requesting again with a higher facetBucketSize.
          example: false
        groupName:
          type: string
          description: For most facets this will be the empty string, meaning the
            facet is high-level and applies to all documents for the datasource. When
            non-empty, this is used to group facets together (i.e. group facets for
            each doctype for a certain datasource)
          example: Service Cloud
    ResultTab:
      properties:
        id:
          type: string
          description: The unique ID of the tab. Can be passed in a search request
            to get results for that tab.
        count:
          type: integer
          description: The number of results in this tab for the current query.
        datasource:
          type: string
          description: The datasource associated with the tab, if any.
        datasourceInstance:
          type: string
          description: The datasource instance associated with the tab, if any.
    ResultsDescription:
      properties:
        text:
          type: string
          description: Textual description of the results. Can be shown at the top
            of SERP, e.g. 'People who write about this topic' for experts in people
            tab.
        iconConfig:
          $ref: '#/components/schemas/IconConfig'
          description: The config for the icon that's displayed with this description
    SearchResponse:
      allOf:
      - $ref: '#/components/schemas/ResultsResponse'
      - $ref: '#/components/schemas/BackendExperimentsContext'
      - type: object
        properties:
          metadata:
            $ref: '#/components/schemas/SearchResponseMetadata'
          facetResults:
            type: array
            items:
              $ref: '#/components/schemas/FacetResult'
          resultTabs:
            type: array
            items:
              $ref: '#/components/schemas/ResultTab'
            description: All result tabs available for the current query. Populated
              if QUERY_METADATA is specified in the request.
          resultTabIds:
            type: array
            items:
              type: string
            description: The unique IDs of the result tabs to which this response
              belongs.
          resultsDescription:
            $ref: '#/components/schemas/ResultsDescription'
          rewrittenFacetFilters:
            type: array
            items:
              $ref: '#/components/schemas/FacetFilter'
            description: The actual applied facet filters based on the operators and
              facetFilters in the query. Useful for mapping typed operators to visual
              facets.
          cursor:
            type: string
            description: Cursor that indicates the start of the next page of results.
              To be passed in "more" requests for this query.
          hasMoreResults:
            type: boolean
            description: Whether more results are available. Use cursor to retrieve
              them.
      example:
        trackingToken: trackingToken
        suggestedSpellCorrectedQuery: suggestedSpellCorrectedQuery
        hasMoreResults: true
        errorInfo:
          errorMessages:
          - source: gmail
            errorMessage: invalid token
          - source: slack
            errorMessage: expired token
        requestID: 5e345ae500ff0befa2b9d1a3ba0001737e7363696f312d323535323137000171756572792d656e64706f696e743a323032303031333074313830343032000100
        results:
        - snippets:
          - snippet: snippet
            mimeType: mimeType
          metadata:
            container: container
            createTime: '2000-01-23T04:56:07.000Z'
            datasource: datasource
            author:
              name: name
            documentId: documentId
            updateTime: '2000-01-23T04:56:07.000Z'
            mimeType: mimeType
            objectType: objectType
          title: title
          url: https://www.example.com/
        - snippets:
          - snippet: snippet
            mimeType: mimeType
          metadata:
            container: container
            createTime: '2000-01-23T04:56:07.000Z'
            datasource: datasource
            author:
              name: name
            documentId: documentId
            updateTime: '2000-01-23T04:56:07.000Z'
            mimeType: mimeType
            objectType: objectType
          title: title
          url: https://www.example.com/
        facetResults:
        - buckets:
          - percentage: 5
            count: 1
            value:
              stringValue: stringValue
              integerValue: 5
          - percentage: 5
            count: 1
            value:
              stringValue: stringValue
              integerValue: 5
          sourceName: sourceName
          operatorName: operatorName
          objectType: objectType
        - buckets:
          - percentage: 5
            count: 1
            value:
              stringValue: stringValue
              integerValue: 5
          - percentage: 5
            count: 1
            value:
              stringValue: stringValue
              integerValue: 5
          sourceName: sourceName
          operatorName: operatorName
          objectType: objectType
        rewrittenQuery: rewrittenQuery
        rewrittenFacetFilters:
        - fieldName: fieldName
          values:
          - fieldValues
          - fieldValues
        - fieldName: fieldName
          values:
          - fieldValues
          - fieldValues
    AgentConfig:
      description: Describes the agent that executes the request.
      properties:
        agent:
          type: string
          description: Name of the agent.
          x-enumDescriptions:
            DEFAULT: Integrates with your company's knowledge.
            GPT: Communicates directly with the LLM.
          enum:
          - DEFAULT
          - GPT
        mode:
          type: string
          description: Top level modes to run GleanChat in.
          x-enumDescriptions:
            DEFAULT: Used if no mode supplied.
            QUICK: Deprecated.
          enum:
          - DEFAULT
          - QUICK
    ChatFileStatus:
      type: string
      description: Current status of the file.
      x-include-enum-class-prefix: true
      enum:
      - PROCESSING
      - PROCESSED
      - FAILED
      - DELETED
    ChatFileFailureReason:
      type: string
      description: Reason for failed status.
      x-include-enum-class-prefix: true
      enum:
      - PARSE_FAILED
      - AV_SCAN_FAILED
      - FILE_TOO_SMALL
      - FILE_TOO_LARGE
      - FILE_EXTENSION_UNSUPPORTED
      - FILE_METADATA_VALIDATION_FAIL
    ChatFileMetadata:
      type: object
      description: Metadata of a file uploaded by a user for Chat.
      properties:
        status:
          $ref: '#/components/schemas/ChatFileStatus'
        uploadTime:
          type: integer
          format: int64
          description: Upload time, in epoch seconds.
        processedSize:
          type: integer
          format: int64
          description: Size of the processed file in bytes.
        failureReason:
          $ref: '#/components/schemas/ChatFileFailureReason'
        mimeType:
          description: MIME type of the file.
          type: string
    ChatFile:
      type: object
      description: Structure for file uploaded by a user for Chat.
      properties:
        id:
          type: string
          description: Unique identifier of the file.
          example: FILE_1234
        url:
          type: string
          description: Url of the file.
          example: www.google.com
        name:
          type: string
          description: Name of the uploaded file.
          example: sample.pdf
        metadata:
          $ref: '#/components/schemas/ChatFileMetadata'
    ReferenceRange:
      description: Each text range from the response can correspond to an array of
        snippets from the citation source.
      properties:
        textRange:
          $ref: '#/components/schemas/TextRange'
        snippets:
          type: array
          items:
            $ref: '#/components/schemas/SearchResultSnippet'
    ChatMessageCitation:
      description: Information about the source for a ChatMessage.
      properties:
        trackingToken:
          type: string
          description: An opaque token that represents this particular result in this
            particular ChatMessage. To be used for /feedback reporting.
        sourceDocument:
          $ref: '#/components/schemas/Document'
        sourceFile:
          $ref: '#/components/schemas/ChatFile'
        sourcePerson:
          $ref: '#/components/schemas/Person'
        referenceRanges:
          description: Each reference range and its corresponding snippets
          type: array
          items:
            $ref: '#/components/schemas/ReferenceRange'
    displayName:
      description: Human understandable name of the tool. Max 50 characters.
      type: string
    logoUrl:
      type: string
      description: URL used to fetch the logo.
    objectName:
      type: string
      description: Name of the generated object. This will be used to indicate to
        the end user what the generated object contains.
      example:
      - HR ticket
      - Email
      - Chat message
    PersonObject:
      required:
      - name
      - obfuscatedId
      properties:
        name:
          type: string
          description: The display name.
        obfuscatedId:
          type: string
          description: An opaque identifier that can be used to request metadata for
            a Person.
    AuthConfig:
      description: Config for tool's authentication method.
      type: object
      properties:
        isOnPrem:
          type: boolean
          description: Whether or not this tool is hosted on-premise.
        usesCentralAuth:
          type: boolean
          description: Whether or not this uses central auth.
        type:
          type: string
          enum:
          - NONE
          - OAUTH_USER
          - OAUTH_ADMIN
          - API_KEY
          - BASIC_AUTH
          - DWD
          description: 'The type of authentication being used.

            Use ''OAUTH_*'' when Glean calls an external API (e.g., Jira) on behalf
            of a user to obtain an OAuth token.

            ''OAUTH_ADMIN'' utilizes an admin token for external API calls on behalf
            all users.

            ''OAUTH_USER'' uses individual user tokens for external API calls.

            ''DWD'' refers to domain wide delegation.

            '
        grantType:
          type: string
          enum:
          - AUTH_CODE
          - CLIENT_CREDENTIALS
          description: The type of grant type being used.
        status:
          type: string
          description: Auth status of the tool.
          enum:
          - AWAITING_AUTH
          - AUTHORIZED
        client_url:
          type: string
          format: url
          description: The URL where users will be directed to start the OAuth flow.
        scopes:
          type: array
          items:
            type: string
          description: A list of strings denoting the different scopes or access levels
            required by the tool.
        audiences:
          type: array
          items:
            type: string
          description: A list of strings denoting the different audience which can
            access the tool.
        authorization_url:
          type: string
          format: url
          description: The OAuth provider's endpoint, where access tokens are requested.
        lastAuthorizedAt:
          type: string
          format: date-time
          description: The time the tool was last authorized in ISO format (ISO 8601).
    ToolMetadata:
      description: The manifest for a tool that can be used to augment Glean Assistant.
      required:
      - type
      - name
      - displayName
      - displayDescription
      properties:
        type:
          description: The type of tool.
          type: string
          enum:
          - RETRIEVAL
          - ACTION
        name:
          description: Unique identifier for the tool. Name should be understandable
            by the LLM, and will be used to invoke a tool.
          type: string
        displayName:
          $ref: '#/components/schemas/displayName'
        toolId:
          type: string
          description: An opaque id which is unique identifier for the tool.
        displayDescription:
          description: Description of the tool meant for a human.
          type: string
        logoUrl:
          $ref: '#/components/schemas/logoUrl'
        objectName:
          $ref: '#/components/schemas/objectName'
        knowledgeType:
          type: string
          description: Indicates the kind of knowledge a tool would access or modify.
          enum:
          - NEUTRAL_KNOWLEDGE
          - COMPANY_KNOWLEDGE
          - WORLD_KNOWLEDGE
        createdBy:
          $ref: '#/components/schemas/PersonObject'
        lastUpdatedBy:
          $ref: '#/components/schemas/PersonObject'
        createdAt:
          type: string
          format: date-time
          description: The time the tool was created in ISO format (ISO 8601)
        lastUpdatedAt:
          type: string
          format: date-time
          description: The time the tool was last updated in ISO format (ISO 8601)
        writeActionType:
          type: string
          description: Valid only for write actions. Represents the type of write
            action. REDIRECT - The client renders the URL which contains information
            for carrying out the action. EXECUTION - Send a request to an external
            server and execute the action.
          enum:
          - REDIRECT
          - EXECUTION
        authType:
          type: string
          enum:
          - NONE
          - OAUTH_USER
          - OAUTH_ADMIN
          - API_KEY
          - BASIC_AUTH
          - DWD
          description: 'The type of authentication being used.

            Use ''OAUTH_*'' when Glean calls an external API (e.g., Jira) on behalf
            of a user to obtain an OAuth token.

            ''OAUTH_ADMIN'' utilizes an admin token for external API calls on behalf
            all users.

            ''OAUTH_USER'' uses individual user tokens for external API calls.

            ''DWD'' refers to domain wide delegation.

            '
        auth:
          deprecated: true
          $ref: '#/components/schemas/AuthConfig'
        permissions:
          deprecated: true
          $ref: '#/components/schemas/ObjectPermissions'
        usageInstructions:
          description: Usage instructions for the LLM to use this action.
          type: string
        isSetupFinished:
          type: boolean
          description: Whether this action has been fully configured and validated.
    PossibleValue:
      type: object
      description: Possible value of a specific parameter
      properties:
        value:
          type: string
          description: Possible value
        label:
          type: string
          description: User-friendly label associated with the value
    WriteActionParameter:
      type: object
      properties:
        type:
          type: string
          description: The type of the value (e.g., integer, string, boolean, etc.)
          enum:
          - UNKNOWN
          - INTEGER
          - STRING
          - BOOLEAN
        displayName:
          type: string
          description: Human readable display name for the key.
        value:
          type: string
          description: The value of the field.
        label:
          type: string
          description: User-friendly label associated with the value.
        isRequired:
          type: boolean
          description: Is the parameter a required field.
        description:
          type: string
          description: Description of the parameter.
        possibleValues:
          type: array
          items:
            $ref: '#/components/schemas/PossibleValue'
          description: Possible values that the parameter can take.
    ToolInfo:
      type: object
      properties:
        metadata:
          $ref: '#/components/schemas/ToolMetadata'
        parameters:
          type: object
          description: Parameters supported by the tool.
          additionalProperties:
            $ref: '#/components/schemas/WriteActionParameter'
    ChatMessageFragment:
      description: Represents a part of a ChatMessage that originates from a single
        action/tool. It is designed to support rich data formats beyond simple text,
        allowing for a more dynamic and interactive chat experience. Each fragment
        can include various types of content, such as text, search queries, action
        information, and more. Also, each ChatMessageFragment should only have one
        of structuredResults, querySuggestion, writeAction, followupAction, or file.
      allOf:
      - $ref: '#/components/schemas/Result'
      - type: object
        properties:
          text:
            type: string
          querySuggestion:
            description: The search queries issued while responding.
            $ref: '#/components/schemas/QuerySuggestion'
          file:
            description: Files referenced in the message fragment. This is used to
              construct rich-text messages with file references.
            $ref: '#/components/schemas/ChatFile'
          action:
            description: Basic information about an action. This can be used to construct
              rich-text messages with action references.
            $ref: '#/components/schemas/ToolInfo'
    ChatMessage:
      description: A message that is rendered as one coherent unit with one given
        sender.
      properties:
        agentConfig:
          $ref: '#/components/schemas/AgentConfig'
          description: Describes the agent config that generated this message. Populated
            on responses and not required on requests.
        author:
          default: USER
          enum:
          - USER
          - GLEAN_AI
        citations:
          type: array
          items:
            $ref: '#/components/schemas/ChatMessageCitation'
          description: A list of Citations that were used to generate the response.
        uploadedFileIds:
          type: array
          items:
            type: string
          description: IDs of files uploaded in the message that are referenced to
            generate the answer.
        fragments:
          type: array
          description: A list of rich data used to represent the response or formulate
            a request. These are linearly stitched together to support richer data
            formats beyond simple text.
          items:
            $ref: '#/components/schemas/ChatMessageFragment'
        ts:
          type: string
          description: Response timestamp of the message.
        messageId:
          type: string
          description: A unique server-side generated ID used to identify a message,
            automatically populated for any USER authored messages.
        messageTrackingToken:
          type: string
          description: Opaque tracking token generated server-side.
        messageType:
          type: string
          default: CONTENT
          description: Semantically groups content of a certain type. It can be used
            for purposes such as differential UI treatment. USER authored messages
            should be of type CONTENT and do not need `messageType` specified.
          x-enumDescriptions:
            UPDATE: An intermediate state message for progress updates.
            CONTENT: A user query or response message.
            CONTEXT: A message providing context in addition to the user query.
            DEBUG: A debug message. Strictly used internally.
            DEBUG_EXTERNAL: A debug message to be used while debugging Action creation.
            ERROR: A message that describes an error while processing the request.
            HEADING: A heading message used to distinguish different sections of the
              holistic response.
            WARNING: A warning message to be shown to the user.
          enum:
          - UPDATE
          - CONTENT
          - CONTEXT
          - DEBUG
          - DEBUG_EXTERNAL
          - ERROR
          - HEADING
          - WARNING
        hasMoreFragments:
          deprecated: true
          type: boolean
          description: Signals there are additional response fragments incoming.
    ChatResponse:
      description: A single response from the /chat backend.
      properties:
        messages:
          type: array
          items:
            $ref: '#/components/schemas/ChatMessage'
        chatId:
          type: string
          description: The id of the associated Chat the messages belong to, if one
            exists.
        followUpPrompts:
          type: array
          items:
            type: string
          description: Follow-up prompts for the user to potentially use
        backendTimeMillis:
          type: integer
          format: int64
          description: Time in milliseconds the backend took to respond to the request.
          example: 1100
        chatSessionTrackingToken:
          type: string
          description: A token that is used to track the session.
    ChatRequest:
      required:
      - messages
      properties:
        saveChat:
          type: boolean
          description: Save the current interaction as a Chat for the user to access
            and potentially continue later.
        chatId:
          type: string
          description: The id of the Chat that context should be retrieved from and
            messages added to. An empty id starts a new Chat, and the Chat is saved
            if saveChat is true.
        messages:
          type: array
          description: A list of chat messages, from most recent to least recent.
            It can be assumed that the first chat message in the list is the user's
            most recent query.
          items:
            $ref: '#/components/schemas/ChatMessage'
        agentConfig:
          $ref: '#/components/schemas/AgentConfig'
          description: Describes the agent that will execute the request.
        inclusions:
          $ref: '#/components/schemas/ChatRestrictionFilters'
          description: A list of filters which only allows chat to access certain
            content.
        exclusions:
          $ref: '#/components/schemas/ChatRestrictionFilters'
          description: A list of filters which disallows chat from accessing certain
            content. If content is in both inclusions and exclusions, it'll be excluded.
        timeoutMillis:
          type: integer
          description: Timeout in milliseconds for the request. A `408` error will
            be returned if handling the request takes longer.
          example: 30000
        applicationId:
          type: string
          description: The ID of the application this request originates from, used
            to determine the configuration of underlying chat processes. This should
            correspond to the ID set during admin setup. If not specified, the default
            chat experience will be used.
        stream:
          type: boolean
          description: If set, response lines will be streamed one-by-one as they
            become available. Each will be a ChatResponse, formatted as JSON, and
            separated by a new line. If false, the entire response will be returned
            at once. Note that if this is set and the model being used does not support
            streaming, the model's response will not be streamed, but other messages
            from the endpoint still will be.
    SummarizeRequest:
      description: Summary of the document
      required:
      - documentSpecs
      properties:
        timestamp:
          type: string
          description: The ISO 8601 timestamp associated with the client request.
          format: date-time
        query:
          type: string
          description: Optional query that the summary should be about
        preferredSummaryLength:
          type: integer
          description: Optional length of summary output. If not given, defaults to
            500 chars.
        documentSpecs:
          type: array
          items:
            $ref: '#/components/schemas/DocumentSpec'
          description: Specifications of documents to summarize
        trackingToken:
          type: string
          description: An opaque token that represents this particular result. To
            be used for /feedback reporting.
    Summary:
      properties:
        text:
          type: string
        followUpPrompts:
          type: array
          items:
            type: string
          description: Follow-up prompts based on the summarized doc
    SummarizeResponse:
      properties:
        error:
          type: object
          properties:
            message:
              type: string
        summary:
          $ref: '#/components/schemas/Summary'
        trackingToken:
          type: string
          description: An opaque token that represents this summary in this particular
            query. To be used for /feedback reporting.
    RunWorkflowRequest:
      properties:
        workflowId:
          type: string
          description: The ID of the workflow to be triggered. Has precedence over the schema.
        schema:
          $ref: '#/components/schemas/WorkflowSchema'
          description: The schema for an unsaved workflow with no associated ID.
        fields:
          type: object
          additionalProperties:
            type: string
          description: Key-value mapping of string -> string where the key is the name of the field in the prompt.
        stream:
          type: boolean
          description: Whether to stream responses as they become available. If false, the entire response will be returned at once.
        timeoutMillis:
          type: integer
          description: Request timeout in milliseconds
        
    WorkflowSchema:
      required:
        - steps
      description: The schema of a workflow, such as the goal and the steps.
      properties:
        goal:
          type: string
          description: The goal of the workflow. This is passed into each step.
        steps:
          type: array
          items:
            $ref: '#/components/schemas/WorkflowStep'
        fields:
          type: array
          description: Fields can be used in the goal, step instruction templates, and tool config input templates.
          items:
            $ref: '#/components/schemas/WorkflowInputField'

    WorkflowInputField:
      type: object
      description: Input field argument of a workflow.
      properties:
        name:
          type: string
          description: The name of the input.
        displayName:
          type: string
          description: Name of the field as displayed to the user.
        description:
          type: string
          description: Description of the field.
        defaultValue:
          type: string
          description: Default value for the field.
        optional:
          type: boolean
          description: Whether this field is optional.
        type:
          type: object
          properties:
            type:
              type: string
              enum:
                - TEXT
                - SELECT
                - DOCUMENT
              description: Type of the form field
        options:
          type: array
          description: Options for SELECT field type.
          items:
            type: object
            properties:
              value:
                type: string
                description: Value of the field.
              label:
                type: string
                description: The human readable label associated with the value.

    WorkflowStep:
      type: object
      properties:
        id:
          type: string
          description: The id of this step in the workflow.
        label:
          type: string
          description: A label associated with the step.
        instructionTemplate:
          type: string
          description: The templatic input to the workflow step.
        type:
          type: string
          description: The type of the action.
          enum:
            - TOOL
            - AGENT
            - BRANCH
        stepDependencies:
          type: array
          description: The ids of steps that the execution of this step depends on.
          items:
            type: string
        toolConfig:
          type: array
          items:
            $ref: '#/components/schemas/WorkflowToolConfig'
        memoryConfig:
          type: string
          description: Memory used to plan the tool's inputs.
          enum:
            - ALL_DEPENDENCIES
            - IMMEDIATE_DEPENDENCIES
            - NO_MEMORY
            
    WorkflowToolConfig:
      type: object
      properties:
        id:
          type: string
          description: The id of the action/tool being used.
        name:
          type: string
          description: The name of the tool being used.
        inputTemplate:
          type: array
          items:
            $ref: '#/components/schemas/WorkflowToolParameter'
            
    WorkflowToolParameter:
      required:
        - template
      properties:
        template:
          type: string
          description: Templatic inputs to the tool where params can be either user input fields or step ids.
        name:
          type: string
          description: tool input field name which is optional.
    
    ListWorkflowsRequest:
      properties:
        includeHidden:
          type: boolean
          description: Whether to include hidden workflows in the listing.
        includeSchemas:
          type: boolean
          description: Whether to include full schemas in the response.
        limit:
          type: integer
          description: Maximum number of workflows to return.
        offset:
          type: integer
          description: Offset for pagination.
    
    GetWorkflowRequest:
      properties:
        includeSchema:
          type: boolean
          description: Whether to include the full workflow schema in the response.
    
    WorkflowListResponse:
      properties:
        workflows:
          type: array
          description: List of workflows
          items:
            $ref: '#/components/schemas/WorkflowSummary'
        totalCount:
          type: integer
          description: Total number of workflows available
    
    WorkflowResponse:
      properties:
        id:
          type: string
          description: The ID of the workflow
        name:
          type: string
          description: Name of the workflow
        description:
          type: string
          description: Description of the workflow
        hidden:
          type: boolean
          description: Whether the workflow is hidden
        created:
          type: string
          format: date-time
          description: When the workflow was created
        updated:
          type: string
          format: date-time
          description: When the workflow was last updated
        schema:
          $ref: '#/components/schemas/WorkflowSchema'
          description: The full schema of the workflow
        creator:
          type: object
          properties:
            email:
              type: string
              description: Email of the workflow creator
    
    WorkflowSummary:
      properties:
        id:
          type: string
          description: The ID of the workflow
        name:
          type: string
          description: Name of the workflow
        description:
          type: string
          description: Description of the workflow
        hidden:
          type: boolean
          description: Whether the workflow is hidden
        created:
          type: string
          format: date-time
          description: When the workflow was created
        updated:
          type: string
          format: date-time
          description: When the workflow was last updated
        creator:
          type: object
          properties:
            email:
              type: string
              description: Email of the workflow creator

x-tagGroups:
- name: Search & Generative AI
  tags:
  - Chat
  - Search
  - Summarize
  - Tools
- name: Connected Content
  tags:
  - Calendar
  - Documents
  - Entities
  - Messages
- name: User Generated Content
  tags:
  - Announcements
  - Answers
  - Collections
  - Displayable Lists
  - Images
  - Pins
  - Shortcuts
  - Verification
- name: General
  tags:
  - Activity
  - Authentication
  - Insights
  - User
